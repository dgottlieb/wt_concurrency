// Code generated by go-bindata.
// sources:
// include/wt_raii.h
// DO NOT EDIT!

package wt_concurrency

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _includeWt_raiiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5b\x73\xdb\x36\x16\x7e\xf7\xaf\x40\xd9\xd9\x94\x52\x15\xb9\xee\xec\x66\x3b\x76\x94\xd9\xd4\x71\xb7\x99\xa6\xf6\x8e\xed\x34\x0f\x6d\x87\x03\x53\x47\x14\xc6\x14\xa0\x02\xa0\x6b\x35\x93\xfe\xf6\x1d\x5c\x08\x12\x20\xa8\x8b\x2f\x9b\x74\xf9\x60\xc9\x04\x70\xee\x38\x38\xf8\x00\x7d\x4e\x68\x5e\x56\x53\x40\xc9\xef\x84\xc3\x54\x92\x02\xf8\x78\x9e\xec\xed\xb9\x86\xe7\x84\x09\xc9\x01\x2f\x5e\xb4\xde\x89\xfa\xd5\x5e\x5e\x62\x21\xd0\x3b\x79\x01\x42\x10\x46\x8f\xf6\x6e\x18\x99\x22\x42\x6f\x30\x27\x98\xca\xef\x30\x29\x61\xfa\x8e\xc8\xf9\x1b\x42\x41\xa4\x84\x4a\xc4\x41\x8e\x50\xce\xa8\x90\x28\x9f\x63\x3e\x44\x33\x52\xc2\x08\x55\x54\x90\x82\xc2\x14\x95\x84\xc2\x60\x13\xa1\x77\x97\xd9\xc5\xc9\xc5\xc5\xeb\xb3\xd3\x21\x12\x86\xf7\x08\x3d\x1c\xf5\x5a\x9f\x27\x77\x22\xbe\xf7\xf9\x14\x66\x84\x42\xc3\xe0\xdd\xe5\xd9\x0f\x27\x58\xac\xd2\x19\x1d\xa0\xcd\xcf\x2f\x7b\xea\xef\xfb\x2d\x7a\xae\xa7\xa0\x1e\x25\x77\xc6\x41\xa2\x09\x9a\xd1\xa3\x3b\x51\x98\xa1\x54\x51\x18\xec\x28\x51\x43\xc1\xc8\xd1\x63\xec\x4c\x5b\x35\xcb\xbe\x7b\xfd\xe6\x24\xcb\xd4\xb7\x37\xaf\x4f\x4f\xb2\x6c\x70\xd4\xa2\xf0\x61\x27\xce\xa1\x0c\x1f\x7a\x5c\x92\x3a\xef\x6e\xe7\x17\xf4\x20\xbe\x09\x48\xa1\x7b\x38\x29\x46\xea\x8e\xde\x8a\x90\x42\xeb\xdc\xe6\x4c\xf7\xa8\xfe\x0b\xa4\x8a\x3b\x52\x89\xb6\xbb\x2b\xff\x0a\x8e\xfc\xec\x3e\x9e\xfc\xc4\x1d\x59\x2f\x1d\xc7\x15\x17\x8c\xa3\xf7\x7b\xcb\xea\xaa\x24\xf9\xa1\x6e\xaf\x5f\xc7\x13\xbd\x90\xd3\xc3\x43\x21\x39\xa1\x05\xaa\x38\xf1\x5f\xe4\x8c\xce\x48\x31\x40\xef\xf7\x3a\xaa\xeb\x39\xef\x59\xa5\x21\x69\xbe\x3c\x7d\xc1\x96\x40\xb3\xdc\x30\x77\xad\x15\x27\xe3\x3c\x13\x92\xa7\x83\x11\xa2\x55\x59\x2e\x25\x1f\x59\x4e\x4d\xc3\x13\x3b\x6e\x30\x38\xaa\x95\xf4\x75\xb1\x5f\x9e\x3c\x41\x4c\xce\x81\x0f\xd0\x21\xaa\x59\xe9\x17\xe3\x9a\x40\x4b\x78\xaf\x01\x4d\x6a\xee\x51\x0e\x4f\x10\x5b\x02\xc7\x92\xf1\x49\x84\x59\x43\xb3\xa1\xe6\x51\x3f\xda\x8e\xa9\x7a\x38\xc8\x8a\x53\x34\x94\x73\x22\x3c\x51\xfe\x74\xda\x7a\x1e\x50\x49\xa9\xab\x5b\xd7\x39\xb6\xd3\xd3\x17\x4d\x54\xd6\x6f\xf2\x92\x09\x48\x03\x13\x1b\xce\x6d\x53\x5c\x66\xc7\x6f\xcf\x2f\xce\xce\x87\xce\x16\x4f\x5f\xa4\x03\xbb\x6a\xbf\x0f\x15\xf0\x34\xef\x92\x28\x40\x7a\x7a\xac\x19\xb5\x3f\x1c\x9a\x6e\x43\xf4\x2f\xdb\x4d\xf2\x0a\x10\xa3\x68\xc1\x38\x20\xa0\x92\x13\x10\x63\xdb\x69\x5f\x7f\x5e\x31\x56\x22\x0a\xb7\x51\x2e\x9f\x39\xd5\x75\x8f\x5a\x73\x8f\xab\x26\xb0\xe4\x70\xb3\x9e\x80\xee\x11\x25\xa0\x0b\x21\x01\xf2\x07\x58\xa9\xea\xec\xd9\xdf\x33\x89\xae\x61\x15\x89\x16\xe5\x13\x99\x5d\xc3\xaa\x26\x34\xd2\x1d\xa3\xd4\x7e\xc2\x65\x05\x8e\xde\x8d\xfa\xaf\x97\xa2\x6e\x6d\x68\x9a\xce\x51\xaa\xdf\xae\x24\x18\xca\xa6\xfa\x7a\x10\xba\x1c\x16\xec\x06\xd2\xde\x7c\xa1\xcb\x36\x47\xd8\xf6\x8e\x4f\xf4\x5a\xdf\xc2\x98\xd3\x27\x69\x9a\x38\xc8\xa3\x6d\xf8\x14\xa1\xa9\x9f\xa8\x85\x60\xd0\x99\x80\x8e\x9e\x15\xa1\x9d\x08\x8d\x18\x17\xfa\x1f\x4f\x98\xa6\x76\xa5\x78\x01\x77\x94\xa7\x1e\x1e\x11\xaa\x25\x44\xea\xba\xf5\x59\xea\x35\xb5\xd1\x72\x5f\x73\x05\xfe\xde\xd2\x60\xc6\x16\x45\x3b\xb8\x7a\xa6\x81\x9d\x24\x4d\xcc\x23\x3f\xb1\xa9\xa8\xc3\x3c\x9f\x37\x89\x6e\x32\x51\xb9\xe4\xf4\xec\xf2\xbb\xb3\xb7\xa7\xaf\xc2\xc4\xa7\xad\x94\xb3\x4a\xa2\xe7\xcf\x51\xf2\x8b\x22\x8e\x28\x93\x68\xc6\x2a\x3a\x1d\x59\x79\x95\x1f\x9f\x1e\x8c\xd1\x0f\xb0\x3a\x44\x89\xea\x79\x0d\x2b\xf5\xa1\x47\x03\x9d\x96\x47\x1e\x51\xab\x65\x27\x5f\x5b\x6d\x1b\x8d\xfb\x2d\xbb\x2e\x07\xdf\xdd\xce\xaa\x30\x12\x38\x98\x68\x7e\x3a\x7d\xfa\x82\x50\x01\xbc\x27\xd3\x29\x02\xb6\xbd\xe5\xa0\x11\xea\x4d\x32\x51\x7f\xb9\xdc\xd4\x4e\x07\xed\xd0\xd5\x22\x76\x25\xd7\x9e\x3d\xb9\xc5\xb9\xec\x0b\x8f\x68\xc8\xc6\x63\x86\x4a\x04\x5c\x2d\xab\x7d\x91\xe3\xc7\x97\xee\xbb\x36\x94\xf6\xf7\x1f\x35\x9a\x9e\x1e\x84\x8b\x6d\x4b\xb4\x50\x16\x3b\x06\x38\x8f\x0e\xfa\xdf\x44\x9a\x4d\xd3\xbb\xcc\xe4\x30\x16\x83\x4c\xef\x58\x2c\x39\xb9\xc1\x12\x0e\xc3\x52\xc1\xd5\x04\x1f\x8e\x3a\xb0\x48\xa7\xb8\xb5\xef\x55\x75\x7b\x7c\x76\x7a\x7a\x72\x7c\xa9\x0b\xdc\x9c\x51\x1a\x96\x4d\xea\x9d\xad\x4a\xad\x95\xf4\xab\x56\x19\x9a\x10\xc1\x4a\x2c\x09\xa3\x13\x41\xf1\x52\xcc\x99\x4c\x54\x31\x6a\xbb\x0f\x42\x0f\xc9\x39\x67\xbf\xa3\xa4\x96\x4d\x91\x46\x33\xbd\x29\x48\xfa\x8a\xaa\x46\x60\x87\x8c\xb4\x6b\xd8\x5a\x30\x5b\x36\xd6\x8c\xbb\x55\xac\x6d\xe9\x2d\x63\x1d\xec\xd2\xae\x63\x3b\x1c\x5b\x0b\x7e\x43\xd0\xe7\xd0\x29\x65\x7b\x38\xa3\x0d\xb5\x6c\xad\x77\xa7\x98\x8d\xe8\x18\x89\xef\x26\xae\xdd\xfe\xc2\x96\xb1\xae\xc5\x8a\xb3\xae\xa0\x75\x1b\xa0\xad\x2a\x5a\xcf\x02\x11\x22\xa6\xa6\xdd\x65\xb4\x9a\x51\x39\x07\x2c\xe1\x12\x5f\x95\x90\x6e\xdc\x7e\xa1\x09\x4a\x12\x6f\xc6\x35\x1d\x0c\x74\x88\x84\x68\x65\x49\xa1\x93\xd6\x35\xac\xb2\x19\xe3\x0b\x2c\x27\xbf\x8d\xf4\xdc\x6f\xfe\x2d\x59\x31\x49\x81\x2a\xf6\xd3\xc9\x0c\x97\x02\x06\x23\x9d\xc0\x14\xbb\xee\x24\x6e\xac\xad\xc5\x6e\x99\xdb\xdb\xc9\x09\x31\xd6\xdf\xea\x37\xdd\xc4\x6f\xc6\xbb\xda\x20\xaa\x7f\x6c\x45\x0b\x05\xf0\x82\xa4\x47\x9a\x35\x06\xa8\x62\x06\x48\xfa\xc4\xd5\x52\xea\x0d\x3e\x2b\x3e\x82\xb0\x81\xb7\xd4\x2e\x28\x94\x55\x57\xde\xb8\x94\xc0\xb5\xac\x6f\x58\x51\xa8\x62\xb1\x13\x58\x7a\x7b\x63\x08\x85\x33\xb0\xfb\x76\xbb\xf9\xa7\xb9\xf6\x05\x44\x12\x93\xbc\x3d\x33\x11\x94\x02\x1e\x93\x67\xed\xda\xbe\x74\x10\x58\xee\x98\x2d\x16\x44\x5e\x92\x05\x08\x89\x17\xcb\x97\x42\x15\x48\x84\x51\xb1\x7e\x92\xde\x00\x27\x33\x92\xeb\x45\xe3\xa7\xb0\x70\x5a\x03\x97\x38\x15\xa2\x6f\x3b\x8a\x7a\xbd\xc2\xa7\x6d\x84\xb5\x1d\xd3\x04\x6b\xb5\x26\x69\xae\xb5\xcd\x64\xad\xee\x24\x41\x5f\x76\x75\x41\x5f\xa2\x64\x90\x34\x93\x7a\xd0\xbb\x4f\x5f\x62\x8e\x17\x88\xc3\x6f\x15\xe1\x30\x45\x39\xa6\xe8\x0a\xd0\xcf\xb8\xfc\x1d\xaf\xc4\x08\x51\xb8\x01\x3e\x42\x94\x51\xf8\xd5\xdf\xb7\xab\xb9\xd6\x38\xe1\xdc\x10\x08\x7c\xb1\xc1\x05\x35\xd7\x9d\xd3\xe4\x1a\x63\x3c\x7f\xde\x28\xa3\xba\x0e\x92\x35\xa9\x71\x6d\x50\x6e\xce\x8c\x53\xce\x96\xbb\xa7\x43\x35\xaa\x8f\x67\xbd\x12\x46\xa1\x2d\x5d\xa6\x58\x64\x69\x0b\xf8\xaf\xb3\x02\x59\x49\x1c\x3a\xe5\xc9\x50\x43\x79\x6b\x58\x7f\x8b\xf3\xeb\x6a\x19\x81\xb6\xfa\x09\x27\x57\x7a\xcc\x61\x32\x52\xb2\x44\x6a\x54\x3c\x7d\xd9\x84\x8b\xd1\xaa\xaa\x4b\x56\xe7\xd6\x70\xe3\xae\xc7\x5d\x5e\x1c\x6b\x81\xcd\xe6\xfe\xe7\x83\x7f\xa0\xfd\xa1\x6e\x68\x85\x03\x1a\xee\xa3\x2f\xd1\xc1\x33\xd5\x74\xf0\x0c\xcd\xe1\x16\x4f\x21\x27\x0b\x5c\xa2\x29\x29\x88\x14\xba\xc3\xda\x99\xa7\x9e\x83\x7f\x2a\x02\x23\xae\xf6\x11\x99\x64\x19\x2b\xa7\x20\xa4\xa5\xae\xf9\xea\x94\x65\xb9\xa9\xff\x25\xc7\xa4\x54\xae\x50\x0e\x45\xc3\xfd\x5f\x9b\x20\xc4\x95\x64\x48\x90\x3f\x00\x4d\xac\xd3\xe8\x92\x13\x2a\x67\x69\x57\xab\xf5\x49\xc1\x4e\x09\xf2\x07\xb0\xd8\xe0\x0d\x29\xc5\x3c\x49\x60\xb1\xbf\x95\xe5\x6d\x47\x51\xad\x5d\xb2\x95\x30\x12\x4b\x92\x67\x39\x16\xf2\x79\x73\x24\xc8\x68\xa1\xff\xbc\x48\x1b\x97\x46\xb6\x1d\x6e\x86\xb8\x5e\x99\xe4\x98\x0a\x9c\xab\xbc\xd6\x8a\xaa\x88\xae\x9d\xd0\xba\x82\x82\xd0\xc7\x8f\xad\xf4\x1b\x34\x44\x5f\x0f\x54\xfb\x37\x5e\x7c\x29\x5a\x38\x97\xc0\xb7\x8d\xb1\xbf\x7c\xd8\x3c\x5e\x80\x6c\xae\x2e\xb4\xb7\xb7\x8f\x96\x6e\xf0\x7d\x15\x0f\xa0\x54\x57\x5f\xa4\xa0\x8c\xc3\x7f\x38\x2c\x31\x57\xf6\x37\x05\x4a\x50\x8c\x79\x9d\x7a\x10\x81\xed\x04\x4e\x0c\xa9\x6c\x69\x68\xe9\x1a\x2c\xd9\x54\x81\xed\xc4\xc1\x5f\x66\x50\x58\x60\xe9\xd4\xcc\xca\x52\x25\xef\x28\x58\xe5\x98\xd4\xbd\xb6\xe2\xd3\x2e\xd2\xf5\xc2\xad\xef\x42\x28\x8f\xa3\x09\xfa\x2a\xb4\xa7\x7a\x1f\xc5\x0b\x7b\x8b\x03\xd4\x14\x08\xf1\xc2\x40\x0f\x9f\xc3\xad\xfa\xae\x9a\xfc\xa1\x66\x3b\x18\xd9\xc7\xd5\x85\x40\x14\x18\x6a\xed\x1c\x2c\xcf\xa8\x25\x14\xa9\xa0\x90\xd8\xde\x95\x6b\x29\x6f\xe1\x4b\x1b\x48\xce\xdc\x3b\xd7\x5b\x96\xc0\xf6\xf6\xdc\xc1\x96\xf6\x52\x09\x9a\xb4\x14\x76\xfc\x76\xb1\xa5\x0f\xff\xa9\x89\x78\x0e\xd2\x62\x7c\x8a\x41\x1c\xe3\x5b\x87\xd5\x42\x6b\xf9\xb8\xb3\xed\x76\x0d\xc5\x1d\x4c\xb7\xf3\xc2\x19\xb1\x5c\x4b\x5f\xc9\x2b\x9a\x63\x09\x2f\x67\xaa\x2a\x6e\x0e\x54\x85\xc4\x5c\xae\x4d\x03\xf5\xc8\x6e\x58\x8e\xcc\xe8\xb1\x46\x5c\x5a\x6f\x3b\x99\x21\xc4\x14\x1d\x56\xd3\xc0\x31\x0d\xaa\xf8\x23\x48\x3c\xc5\x12\x47\xcf\xcd\xfd\x46\x0f\x3c\x73\x88\x55\x0b\xb0\xd3\x96\xd6\x38\x67\x0c\x2c\xbc\xc7\x46\xb0\x7d\x8a\x5e\xbf\xad\xed\x90\x2c\xac\x90\xaa\x32\x0e\x8d\xd2\x7b\x8a\x1e\xa8\xdd\x00\x84\x26\x66\xfc\x66\x07\x15\x4e\xd0\x14\x4a\x90\x70\x14\x23\x92\x06\x83\xea\x51\x4e\xa7\xa8\xa5\x02\x90\x73\xe0\x40\xeb\xb4\xf6\x2b\x7a\xff\x51\xcf\x84\xdb\x17\xd4\x22\x47\x91\xed\xe6\x75\xa7\x40\x71\x4c\xfe\x2e\x87\x92\x81\x40\xdd\xe3\xbe\xfb\x89\xb4\xfb\x31\x81\x3f\xdf\x1c\x4a\xef\x83\x9f\x9b\xb0\xfd\x63\x46\xbb\xc0\xbe\x7a\xe9\xed\x4f\xa7\x57\x4b\x2c\xe7\xbd\x5b\x54\x0b\x71\x09\xa9\xc1\x9c\x39\xe4\xd7\x4b\x46\xa8\x3c\xa3\xc7\x25\x13\xaa\x34\xd0\x18\x94\x17\x90\xf1\xae\x69\xcf\xfb\xdd\x53\xb6\xc6\x00\x47\x39\xce\xe7\x90\xa9\x42\x79\x72\xf0\xef\x6f\x63\x88\x9e\x7f\x48\x65\xef\xc2\x94\x40\x0b\x39\x4f\x07\xe8\x85\x5f\xd4\xb4\x18\x34\xb8\x2d\x29\xa2\x07\x94\xd9\x1c\xd3\x69\x09\x7c\x6c\x3e\x33\xe0\x3c\x7e\x09\x25\xec\xb8\x00\x21\x70\x01\xdb\x74\x5d\x72\x56\x70\x10\x62\x9b\xbe\xb9\x75\x45\xa7\xa3\xd2\xbb\xb9\x37\x9b\xa9\x9c\x97\x1a\x7f\xb7\xef\x04\x59\x6a\x5d\x4c\x45\xa7\x3a\x46\x7b\x0f\x68\x02\xd2\x1b\xcf\x68\x74\xec\x99\x8f\xbe\xfc\xf7\xa7\xed\xd5\x3d\xce\xd8\x1c\x3d\x28\x76\xd0\xf8\x56\xa8\x80\x76\x4b\xaf\x50\xa9\x4d\xdb\x6b\x9c\xac\x39\x57\x34\xa7\xe6\xfa\x60\xab\xbe\xd5\xa3\x8f\xb4\x92\x4a\xb4\xeb\x2c\x53\xfb\x87\x32\x58\x39\xba\x46\x32\x7e\xea\x58\x09\x79\x07\x90\x71\x04\x77\x3b\x79\x0c\x14\xf0\xd0\x02\xf9\x4e\xac\x73\x51\x01\xd1\xb3\x27\x87\x36\xd5\x8d\x26\x82\xba\xe5\x5b\xe0\x4f\x8f\x48\xc3\xa5\x39\x15\x6b\xf3\xeb\x9e\x8a\xbb\x62\xbc\x21\x18\x2e\xea\x31\xd7\x75\xc4\xaa\xe8\xc7\x16\xcc\xfa\x30\x56\xef\x5e\x68\xd1\xfa\x40\x13\xe1\xb7\xda\xc4\x3d\x63\x3c\xef\xdd\x15\xeb\xc6\x30\x5a\x34\xce\x62\x89\x05\x48\x8b\x46\xda\x12\xd3\x16\x82\x2d\x5b\xc0\x0b\xea\x69\x41\x32\xfd\x98\x1f\x3a\xd0\x80\x4b\x32\xd2\x02\x1a\x5f\xed\xc2\x64\x13\x5c\x83\xd6\x42\x36\x31\xdd\xb7\x41\x4f\x50\x03\xdc\xc4\x48\x6c\x05\xdd\xa8\xa7\x6b\x60\x8d\xfb\xb5\x6c\xb1\xb5\x34\x1b\xf0\x9c\x20\x64\x06\x3d\x9b\x68\x93\x78\x04\xb4\xf6\x49\x75\x02\x8a\x2a\xba\x61\x07\xfd\x49\x04\xd8\xff\x61\x84\xfc\x85\xc2\x22\x92\xdc\xce\x34\x9a\xdd\x97\xdc\x98\xdf\xda\xc1\x85\x6d\x7b\x34\x9c\x4c\xdb\x1d\xc2\xe9\x61\x42\xa9\x3f\x8c\x62\x42\xef\x80\x0e\xc7\x86\x6f\x87\x0f\x77\x2c\xf2\x60\x08\x71\xe8\xa7\xd8\xfd\xa5\xfe\xb0\x89\x6a\xb4\x6e\x93\x5d\x80\x0c\x76\xcc\x91\x5a\x24\xe8\xd1\x5e\xaf\x1b\xe2\xfa\xd3\x85\xdb\x6f\x15\xf0\xd5\xcb\xb2\x7c\x55\x71\x7f\xc9\xed\x04\xde\x55\x35\xfb\x39\xfd\x1a\x0d\xd1\x37\x68\x7f\x78\xb5\x92\x20\x10\xa1\x2a\x56\x86\xfb\x03\x1b\x1c\xb4\x2a\x91\x04\xbe\x20\x14\x4b\xc6\xbd\xd8\x88\xdd\x18\xd5\xe6\xd1\x02\x74\x0d\x74\x55\xcd\x46\x28\x29\x40\x4e\x70\x59\x66\x53\x23\x9d\x3e\x8b\xef\x14\x1e\x6d\x47\x59\xb5\xd4\xcc\xe6\x92\x95\xa9\x26\xe3\xf0\x8c\x83\x67\x01\x92\xe1\x9b\xe1\x1c\x72\x76\x03\x7c\xf5\x09\x1a\x81\x5b\xd1\x1e\xd9\x02\x4d\x31\xf8\x09\xda\xa0\xc4\x42\x66\x4d\x75\xf9\xe0\xa6\x68\x1f\x37\x5c\x32\x53\x82\xc6\xef\xc8\x6a\x79\x9b\x33\x07\x66\xf7\x6c\xb5\xc8\xbd\xc7\x0d\x02\xe4\x39\x94\x80\x85\x7f\x52\xcf\xcd\xbb\xce\xed\x8f\x2e\x50\x71\x21\xd5\xee\x3b\xc9\xd9\x62\x89\x25\xb9\x22\x25\x91\xab\x49\x6a\xc7\xeb\x2b\x18\x6d\x5a\xe6\xf6\x45\x5f\x5e\x52\x21\xa5\x68\x56\xdc\x09\xee\x98\xc4\xc1\xd9\xee\x7d\x0d\xc9\x5e\xc1\x55\x55\x20\x22\x10\xa6\x2b\xc4\x66\x28\xb1\x35\xbf\x18\x19\xa0\x46\x8c\xcc\xa6\x5b\x8c\x4a\x56\x8c\xe4\x2d\x4d\xc6\xe8\x64\x5c\x1c\xd6\x84\x82\xc7\x0d\xd7\xe5\x5f\x4d\xc3\xd4\x82\x3e\x36\xa7\x6f\xdf\x4c\x15\xf7\xd7\x74\xc6\x3c\x7b\x5a\xa9\xfc\x9f\x23\x68\x9d\x75\xff\x8c\xa8\x01\x56\x65\xdb\x37\xae\xb0\xfd\x55\x02\x9e\x7e\x0f\xe5\x12\xfc\xdb\x0e\xda\xe3\x6f\x39\x31\x3f\x47\xad\xef\x3f\x37\xfb\xef\xf0\x2c\x69\xfb\x0d\x55\x7d\xea\x64\xc8\xc4\xd0\x1b\xbb\xad\x0a\xaf\x2d\x34\x87\x96\x51\x30\xc7\x5d\xa2\x70\xbf\x25\xaa\x09\xb5\x2e\x74\xd4\x6a\xf5\x1e\x68\x9c\x03\x9e\x12\x5a\x8c\x91\xbe\x71\x62\xcf\x35\xea\x51\xba\x87\x7f\xa7\x39\xb2\xd4\xea\x4e\x4e\xec\x9a\x84\xd3\x58\x37\xeb\x00\xb6\x4d\x46\xde\x71\xfb\xe6\xf7\x35\xac\x06\x71\xca\x01\xce\x11\xbb\x26\xdc\xba\xe6\xab\xa3\xe0\xa8\x05\x8d\xea\xad\x64\x1f\x06\xe3\xd0\xc8\x93\x9f\x4e\x4e\x2f\xb3\xef\x5f\x9e\xbe\x7a\x73\x72\xee\x50\x2a\x03\x4a\x3e\xd0\xcf\xae\xad\xcf\x3d\xe3\xab\x7e\xea\xf3\x8b\xc3\x2f\xd4\x87\xea\xa7\xad\x75\x88\x4e\x38\x67\xbc\x39\x64\xda\x8b\x18\xfc\x47\x03\xc9\xd9\x4e\x2d\x6c\x44\x48\xae\x71\xbd\x54\xff\xc0\xb1\x6b\x42\xb8\x25\x32\xfd\x6a\x70\xb4\xf7\x61\x93\x72\xf7\xfb\x29\xf8\x23\x6b\xec\x00\x0a\xa7\x6f\xeb\x68\xfe\xbe\x8a\xdf\xe7\x57\xea\x1f\x4b\xef\x1a\x96\xd9\xac\xfd\x7f\x03\x00\x00\xff\xff\x90\xaa\x2b\x8b\x9c\x40\x00\x00")

func includeWt_raiiHBytes() ([]byte, error) {
	return bindataRead(
		_includeWt_raiiH,
		"include/wt_raii.h",
	)
}

func includeWt_raiiH() (*asset, error) {
	bytes, err := includeWt_raiiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "include/wt_raii.h", size: 16540, mode: os.FileMode(436), modTime: time.Unix(1639538675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/wt_raii.h": includeWt_raiiH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"include": &bintree{nil, map[string]*bintree{
		"wt_raii.h": &bintree{includeWt_raiiH, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

