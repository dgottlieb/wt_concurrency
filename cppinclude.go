// Code generated by go-bindata.
// sources:
// include/wt_raii.h
// DO NOT EDIT!

package wt_concurrency

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _includeWt_raiiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5b\x73\xdb\x36\x16\x7e\xf7\xaf\x40\xd9\xd9\x94\x52\x15\xbb\xee\xec\x66\x3b\x76\xe4\xd9\xd4\x71\xb7\x99\xa6\xf6\x8e\xed\x34\x0f\x69\x87\x03\x93\x47\x14\xc6\x14\xa0\x02\xa0\x63\x35\x93\xfe\xf6\x1d\x5c\x78\x01\x08\x4a\x94\x2f\x9b\x74\xf5\x10\xd9\xb8\x9c\x3b\x0e\x0e\x3e\xc0\xf9\x92\xd0\xb4\x28\x33\x40\xd1\x7b\xc2\x21\x93\x24\x07\xbe\x3b\x8f\x76\x76\xea\x8e\xe7\x84\x09\xc9\x01\x2f\x8e\x5a\x6d\xa2\x6a\xda\x49\x0b\x2c\x04\x7a\x2b\x2f\x40\x08\xc2\xe8\xe1\xce\x0d\x23\x19\x22\xf4\x06\x73\x82\xa9\xfc\x01\x93\x02\xb2\xb7\x44\xce\x5f\x13\x0a\x22\x26\x54\x22\x0e\x72\x82\x52\x46\x85\x44\xe9\x1c\xf3\x31\x9a\x91\x02\x26\xa8\xa4\x82\xe4\x14\x32\x54\x10\x0a\xa3\x4d\x84\xde\x5e\x26\x17\x27\x17\x17\xaf\xce\x4e\xc7\x48\x18\xde\x13\xf4\x70\xd4\x2b\x7d\x9e\xdc\x89\xf8\xce\x97\x19\xcc\x08\x85\x86\xc1\xdb\xcb\xb3\x9f\x4e\xb0\x58\xc5\x33\x3a\x42\x9b\x3f\xbf\xee\xa8\x7f\x3f\x0c\x18\xb9\x9e\x82\xfa\x28\xb9\x13\x0e\x12\x4d\xd1\x8c\x1e\xde\x89\xc2\x0c\xc5\x8a\xc2\x68\x4b\x89\x1a\x0a\x46\x8e\x1e\x63\x27\xda\xaa\x49\xf2\xc3\xab\xd7\x27\x49\xa2\x7e\x7a\xfd\xea\xf4\x24\x49\x46\x87\x2d\x0a\x1f\xb7\xe2\xec\xcb\xf0\xb1\xc7\x25\x71\xed\xdd\x61\x7e\x41\x0f\xe2\x1b\x8f\x14\xba\x87\x93\x42\xa4\xee\xe8\xad\x00\x29\xb4\xce\x6d\xb5\xe9\x1e\xd5\x7f\x9e\x54\x61\x47\x2a\xd1\xb6\x77\xe5\x5f\xc1\x91\x5f\xdc\xc7\x93\x9f\xb9\x23\xab\xad\xe3\xb8\xe4\x82\x71\xf4\x61\x67\x59\x5e\x15\x24\x3d\xd0\xfd\x55\x73\x38\xd1\x0b\x99\x1d\x1c\x08\xc9\x09\xcd\x51\xc9\x89\xdb\x90\x32\x3a\x23\xf9\x08\x7d\xd8\xe9\xa8\xae\xd7\xbc\x63\x95\x86\xa4\xf9\xe1\xe9\x11\x5b\x02\x4d\x52\xc3\xbc\xee\x2d\x39\xd9\x4d\x13\x21\x79\x3c\x9a\x20\x5a\x16\xc5\x52\xf2\x89\xe5\xd4\x74\x3c\xb1\xf3\x46\xa3\xc3\x4a\x49\x57\x17\xfb\xc3\x93\x27\x88\xc9\x39\xf0\x11\x3a\x40\x15\x2b\xdd\xb0\x5b\x11\x68\x09\xef\x74\xa0\x69\xc5\x3d\xc8\xe1\x09\x62\x4b\xe0\x58\x32\x3e\x0d\x30\x6b\x68\x36\xd4\x1c\xea\x87\xc3\x98\xaa\x0f\x07\x59\x72\x8a\xc6\x72\x4e\x84\x23\xca\x9f\xb5\xb6\x8e\x07\x54\x52\xea\xea\xd6\x75\x8e\x1d\xf4\xf4\xa8\x89\xca\xaa\x25\x2d\x98\x80\xd8\x33\xb1\xe1\xdc\x36\xc5\x65\x72\xfc\xe6\xfc\xe2\xec\x7c\x5c\xdb\xe2\xe9\x51\x3c\xb2\xbb\xf6\x07\x5f\x01\x47\xf3\x2e\x89\x1c\xa4\xa3\xc7\x9a\x59\x7b\xe3\xb1\x19\x36\x46\xff\xb2\xc3\x24\x2f\x01\x31\x8a\x16\x8c\x03\x02\x2a\x39\x01\xb1\x6b\x07\xed\xe9\xef\x2b\xc6\x0a\x44\xe1\x36\xc8\xe5\x8b\x5a\x75\x3d\xa2\xd2\xdc\xe1\xaa\x09\x2c\x39\xdc\xac\x27\xa0\x47\x04\x09\xe8\x42\x48\x80\xfc\x09\x56\xaa\x3a\x7b\xf6\xf7\x44\xa2\x6b\x58\x05\xa2\x45\xf9\x44\x26\xd7\xb0\xaa\x08\x4d\xf4\xc0\x20\xb5\x5f\x70\x51\x42\x4d\xef\x46\xfd\xd6\x4b\x51\xf7\x36\x34\xcd\xe0\x20\xd5\xef\x57\x12\x0c\x65\x53\x7d\x3d\x08\x5d\x0e\x0b\x76\x03\x71\x6f\xbe\xd0\x65\x5b\x4d\xd8\x8e\x0e\x2f\xf4\x4a\xdf\xdc\x98\xd3\x25\x69\xba\x38\xc8\xc3\x21\x7c\x72\xdf\xd4\x4f\xd4\x46\x30\xea\x2c\xc0\x9a\x9e\x15\xa1\x9d\x08\x8d\x18\x17\xfa\x17\x47\x98\xa6\x76\xa5\x78\x01\x77\x94\xa7\x9a\x1e\x10\xaa\x25\x44\x5c\x0f\xeb\xb3\xd4\x2b\x6a\xa3\xe5\xbe\xe6\xf2\xfc\x3d\xd0\x60\xc6\x16\x79\x3b\xb8\x7a\x96\x81\x5d\x24\x4d\xcc\x23\x37\xb1\xa9\xa8\xc3\x3c\x9d\x37\x89\x6e\x3a\x55\xb9\xe4\xf4\xec\xf2\x87\xb3\x37\xa7\x2f\xfd\xc4\xa7\xad\x94\xb2\x52\xa2\xe7\xcf\x51\xf4\xab\x22\x8e\x28\x93\x68\xc6\x4a\x9a\x4d\xac\xbc\xca\x8f\x4f\xf7\x77\xd1\x4f\xb0\x3a\x40\x91\x1a\x79\x0d\x2b\xf5\xa5\x67\x03\xcd\x8a\x43\x87\xa8\xd5\xb2\x93\xaf\xad\xb6\x8d\xc6\xfd\x96\x5d\x97\x83\xef\x6e\x67\x55\x18\x09\xec\x2d\x34\x37\x9d\x3e\x3d\x22\x54\x00\xef\xc9\x74\x8a\x80\xed\x6f\x39\x68\x82\x7a\x93\x4c\xd0\x5f\x75\x6e\x6a\xa7\x83\x76\xe8\x6a\x11\xbb\x92\x6b\xcf\x9e\xdc\xe2\x54\xf6\x85\x47\x30\x64\xc3\x31\x43\x25\x02\xae\xb6\xd5\xbe\xc8\x71\xe3\x4b\x8f\x5d\x1b\x4a\x7b\x7b\x8f\x1a\x4d\x4f\xf7\xfd\xcd\xb6\x25\x9a\x2f\x8b\x9d\x03\x9c\x07\x27\xfd\x6f\x22\xcd\xa6\xe9\x6d\x56\xb2\x1f\x8b\x5e\xa6\xaf\x59\x2c\x39\xb9\xc1\x12\x0e\xfc\x52\xa1\xae\x09\x3e\x1e\x76\x60\x91\x4e\x71\x6b\xdb\x55\x75\x7b\x7c\x76\x7a\x7a\x72\x7c\xa9\x0b\xdc\x94\x51\xea\x97\x4d\xaa\xcd\x56\xa5\xd6\x4a\xba\xa9\x55\x86\x46\x44\xb0\x02\x4b\xc2\xe8\x54\x50\xbc\x14\x73\x26\x23\x55\x8c\xda\xe1\x23\xdf\x43\x72\xce\xd9\x7b\x14\x55\xb2\x29\xd2\x68\xa6\x0f\x05\x51\x5f\x51\xd5\x08\x5c\x23\x23\xed\x1a\xb6\x12\xcc\x96\x8d\x15\xe3\x6e\x15\x6b\x7b\x7a\xcb\xd8\x1a\x76\x69\xd7\xb1\x1d\x8e\xad\x0d\xbf\x21\xe8\x72\xe8\x94\xb2\x3d\x9c\xd1\x86\x5a\xb6\xd2\xbb\x53\xcc\x06\x74\x0c\xc4\x77\x13\xd7\xf5\xf9\xc2\x96\xb1\x75\x8f\x15\x67\x5d\x41\x5b\x1f\x80\x06\x55\xb4\x8e\x05\x02\x44\x4c\x4d\xbb\xcd\x6c\xb5\xa2\x52\x0e\x58\xc2\x25\xbe\x2a\x20\xde\x78\xfc\x42\x53\x14\x45\xce\x8a\x6b\x06\x18\xe8\x10\x09\xd1\xe8\xab\xd2\x97\xd0\x79\xeb\x1a\x56\xc9\x8c\xf1\x05\x96\xd3\xdf\x27\x7a\xf9\x37\xbf\x16\x2c\x9f\xc6\x40\x95\x04\xd9\x74\x86\x0b\x01\xa3\x89\xce\x61\x8a\x63\x2b\xe5\xde\x8d\xd2\x7b\x4e\x24\x24\x92\x2c\x40\x48\xbc\x58\x26\xa5\xc0\x39\x4c\x19\xcf\x80\x43\x36\xc1\x42\x6d\x3c\xd3\xd8\x1b\x35\x65\x74\x34\xb9\x01\x7e\xc5\x04\x4c\xdf\x79\x9d\xbf\x85\xa4\xf3\xcc\xfc\xf4\xc8\xd8\xb5\x15\x0f\xce\x51\x53\x88\x5d\xfd\x53\xd5\xd2\xdd\x99\xcc\xfc\xba\x78\x09\x3a\x28\xb4\xe5\xfa\x02\x38\x51\xdc\x23\xcd\x1a\xa3\x96\x21\xa3\x46\x7d\xe2\x6a\x29\x35\x02\xc1\xf2\x4f\x20\xac\x17\x01\xea\x98\xe6\xcb\xaa\x8f\x06\xb8\x90\xc0\xb5\xac\xaf\x59\x9e\xab\x6a\xb6\x13\xf9\xfa\xfc\x65\x08\xf9\x29\xa2\xdb\x3a\x2c\x41\x68\xae\x7d\x01\x11\x85\x24\x6f\xa7\x0e\x04\x85\x80\xc7\xe4\x59\xb9\xb6\x2f\x5f\x79\x96\x3b\x66\x8b\x05\x91\x97\xd5\xa2\x78\xa1\x17\x12\x61\x54\xac\xcf\x22\x37\xc0\xc9\x8c\xa4\x7a\x57\xfb\xc5\xaf\xec\xd6\xe0\x39\xb5\x0a\xc1\xd6\x8e\xa2\xce\x28\xff\xd3\x36\xc2\xda\x81\x71\x54\xe5\x87\x54\x6b\xdb\x4a\x10\x11\xfa\xba\xab\x0b\xfa\x1a\x45\xa3\xa8\x59\xd4\xa3\x5e\x20\x61\x89\x39\x5e\x20\x0e\xbf\x97\x84\x43\x86\x52\x4c\xd1\x15\xa0\x77\xb8\x78\x8f\x57\x62\x82\x28\xdc\x00\x9f\x20\xca\x28\xfc\xe6\x02\x0b\x6a\xad\x35\x4e\x38\x37\x04\x3c\x5f\x6c\x70\x41\xc5\x75\x78\x1e\xb7\xa9\x77\x8d\x31\x9e\x3f\x6f\x94\x51\x43\x47\xd1\x9a\xd4\xb8\x36\x28\x37\x67\xc6\x8c\xb3\xe5\xf6\xe9\x50\xcd\xea\xe3\x59\x6d\xd5\x41\xec\x4d\xd7\x51\x16\xfa\x1a\x80\x4f\x76\xb6\x48\x2b\x49\x0d\x9f\x39\x32\x54\x58\xe3\x1a\xd6\xdf\xe3\xf4\xba\x5c\x06\xb0\xb7\x7e\xc2\xd1\x95\x9e\x73\x10\x4d\x94\x2c\x81\x22\x1a\x67\x2f\x9a\x70\x31\x5a\x95\x55\x4d\x5d\xbb\xd5\x47\x16\xf4\xbc\xcb\x8b\x63\x2d\xb0\x41\x1f\xde\xed\xff\x03\xed\x8d\x75\x47\x2b\x1c\xd0\x78\x0f\x7d\x8d\xf6\x9f\xa9\xae\xfd\x67\x68\x0e\xb7\x38\x83\x94\x2c\x70\x81\x32\x92\x13\x29\xf4\x80\xb5\x2b\x4f\x7d\xf6\xff\xa9\x08\x4c\xb8\x3a\xe8\x24\x92\x25\xac\xc8\x40\x48\x4b\x5d\xf3\xd5\x29\xcb\x72\x53\xbf\x4b\x8e\x49\xa1\x5c\xa1\x1c\x8a\xc6\x7b\xbf\x35\x41\x88\x4b\xc9\x90\x20\x7f\x00\x9a\x5a\xa7\xd1\x25\x27\x54\xce\xe2\xae\x56\xeb\x93\x82\x5d\x12\xe4\x0f\x60\xa1\xc9\x1b\x52\x8a\xf9\x44\x9e\xc5\xfe\x56\x14\xb7\x1d\x45\xb5\x76\xd1\x20\x61\x24\x96\x24\x4d\x52\x2c\xe4\xf3\xe6\xce\x92\xd1\x5c\xff\x73\x14\x37\x2e\x0d\x9c\x8b\xea\x15\xd2\xd4\x48\x92\x63\x2a\x70\xaa\xf2\x5a\x2b\xaa\x02\xba\x76\x42\xeb\x0a\x72\x42\x1f\x3f\xb6\xe2\xef\xd0\x18\x7d\x3b\x52\xfd\xdf\x39\xf1\xa5\x68\xe1\x54\x02\x1f\x1a\x63\x7f\xf9\xb0\x79\xbc\x00\xd9\x5c\x5d\x68\x6f\x0f\x8f\x96\x6e\xf0\x7d\x13\x0e\xa0\x58\x57\x5f\x24\xa7\x8c\xc3\x7f\x38\x2c\x31\x57\xf6\x37\x05\x8a\x57\x8c\x39\x83\x7a\x20\x8b\x61\x02\x47\x86\x54\xb2\x34\xb4\x74\x0d\x16\x6d\xaa\xc0\xb6\xe2\xe0\x6e\x33\xc8\x2f\xb0\x74\x6a\x66\x45\xa1\x92\x77\x10\x4d\xab\x99\x54\xa3\x06\xf1\x69\x17\xe9\x7a\xe3\xd6\x8f\x35\x94\xc7\xd1\x14\x7d\xe3\xdb\x53\xb5\x07\x01\xcd\xde\xe2\x00\x35\x05\x42\xb8\x30\xd0\xd3\xe7\x70\xab\x7e\x56\x5d\xee\x54\x73\x5e\x0d\x1c\x34\xab\x42\x20\x88\x5c\xb5\x4e\x0e\x96\x67\xd0\x12\x8a\x94\x57\x48\x0c\x77\xe5\x5a\xca\x03\x7c\x69\xe6\xdb\xd0\xcc\xe2\xa6\xe9\x52\x98\x57\x27\x59\xc9\x55\x19\x73\x29\x1e\xd1\xe0\x15\x47\x3d\x7c\x62\x39\xae\x9b\x50\x0b\xf5\x69\xdd\xd4\xb2\xa3\x5d\x90\x75\xd8\x6e\x5d\xb7\x5a\x02\xc3\xe3\x72\x0b\x65\xed\xeb\x21\x34\x6d\xe9\x5a\xf3\xdb\x26\x26\x5d\x9c\x57\x45\xcd\x39\x48\x0b\xe6\x2a\x06\x61\x30\x77\x1d\x28\x0f\xad\x6d\xf8\xce\xb6\xdb\x76\x49\x6f\x61\xba\xad\x0b\x90\xf5\x61\x22\x40\xbe\xb4\xb1\x7b\x7f\xb5\x07\x2c\x94\xcf\x45\x6f\xc9\x4b\x9a\x62\x09\x2f\x66\xea\x54\xd5\xbc\x18\x10\x12\x73\xb9\x76\x1b\xa9\x66\x76\xd3\xda\xc4\xcc\xde\xd5\x90\x62\xab\xb5\xb3\xb3\xf8\xa0\x79\x0d\x46\x36\x78\x63\x03\x9b\xff\x0c\x12\x67\x58\xe2\xe0\xc3\x10\xb7\xd3\x41\x87\x6b\x48\xb6\x85\x48\x6b\x4b\x6b\x20\x3f\x84\x86\xdf\x03\x48\x68\x3f\x13\xa9\x5a\x2b\x3b\x44\x0b\x2b\xa4\x3a\x59\xf9\x46\xe9\x7d\x26\xe2\xa9\xdd\x20\xe0\x26\x66\xdc\xee\x1a\x0b\x9f\xa2\x0c\x0a\x90\x70\x18\x22\x12\x7b\x93\xaa\x59\xb5\x4e\x41\x4b\x79\x28\xfe\xa8\xbe\x95\x89\x2b\xbf\xa2\x0f\x9f\xf4\xd1\x43\xfb\x05\x66\xe0\xae\xbd\xdd\xbd\xee\x9a\x33\x7c\xe9\x74\x97\x5b\x77\x4f\xa0\xee\x7d\xf6\xfd\x44\xda\xfe\x1e\xcc\x5d\x6f\xf5\x35\x94\x8b\xee\x6f\xba\xbc\x3a\x66\xb4\x7b\x73\xa5\x1a\x1d\x7c\x23\xbb\x5a\x62\x39\xef\x85\x38\x2c\x44\x2a\xa4\x06\x03\xe7\x90\x5e\x2f\x19\xa1\xf2\x8c\x1e\x17\x4c\xa8\xd2\x52\x63\x98\x4e\x40\x86\x87\xc6\x3d\xed\xdb\x6f\x55\x1a\x43\x9e\xa4\x38\x9d\x43\xa2\x0e\x5a\xd3\xfd\x7f\x7f\x1f\x42\x84\xdd\x5b\x58\xfb\xd8\xab\x00\x9a\xcb\x79\x3c\x42\x47\x6e\x51\xdc\x62\xd0\xe0\xfe\x24\x0f\xde\xc0\x27\x73\x4c\xb3\x02\xf8\xae\xf9\x4e\x80\xf3\xf0\x2b\x2b\x7f\xe0\x02\x84\xc0\x39\x0c\x19\xba\xe4\x2c\xe7\x20\xc4\x90\xb1\xa9\x75\x45\x67\xa0\xd2\xbb\x79\x18\x9e\xa8\x9c\x17\x1b\x7f\xb7\x1f\xbd\x59\x6a\x5d\x4c\x4e\xa7\x3a\x46\x7b\x6f\x20\x3d\xd2\x1b\x2f\x21\x75\xec\x99\xaf\xbe\xfc\xf7\xa7\x1d\xd5\xbd\xaf\xdb\x1c\x3d\x28\x74\x93\xfe\x46\xa8\x80\xae\xb7\x5e\xa1\x52\x9b\xb6\xd7\x6e\xb4\xe6\xe2\xdc\x3c\x0b\xd1\x37\xb7\xd5\xb3\x35\x7d\x67\x1b\x95\xa2\x5d\x2c\x98\xb3\xa3\x2f\x83\x95\xa3\x6b\x24\xe3\xa7\x8e\x95\x90\x73\xc3\x1e\xbe\x01\x18\x26\x8f\x81\x92\x1e\x5a\x20\xd7\x89\x55\x2e\xca\x21\x78\xb9\x5a\xa3\x95\x55\xa7\x89\xa0\x6e\x19\xe7\xf9\xd3\x21\xd2\x70\x69\xae\x7d\xdb\xfc\xba\xcf\x3e\xea\xf3\x47\x43\xd0\xdf\xd4\x43\xae\xeb\x88\x55\xd2\x4f\x2d\x98\xf5\x61\xa8\xee\xbd\x90\x6e\xd9\xeb\x82\x6e\xc2\xed\xb5\x89\x7b\xc6\x78\xda\x8b\xaa\xe8\x4e\x3f\x5a\x34\x4e\x67\x89\x79\x48\x9d\x46\x6a\x23\xd3\xe7\x83\x75\x03\xe0\x29\xf5\x69\x41\x7a\xfd\x98\x31\xda\xd7\x80\x5d\x34\xd1\x02\x1a\x5f\x6d\xc3\x64\x13\xdc\x87\xd6\x42\x7e\x21\xdd\x87\xa0\x6f\xa8\x01\xfe\x42\x24\x06\x41\x7f\xea\xd3\x35\xb0\xc6\x8d\x5b\xb6\x18\x2c\xcd\x06\x3c\xd0\x0b\x99\x51\xcf\xe9\xde\x24\x1e\x01\xad\xf3\x61\x95\x80\x82\x8a\x6e\x40\x60\x3e\x8b\x00\xfb\x3f\x8c\x90\xbf\x50\x58\x04\x92\xdb\x99\xbe\x0d\xe9\x4b\x6e\xcc\xed\xed\xdc\x2b\xd8\xfe\x60\x38\x99\xbe\x3b\x84\xd3\xc3\x84\x52\x7f\x18\x85\x84\xde\xe2\x76\x21\x34\x7d\xd8\xfd\x42\xc7\x22\x0f\x76\xc3\xe0\xfb\x29\xf4\x40\xaf\x3f\x6c\x82\x1a\xad\x3b\x64\xe7\x20\xbd\x13\x73\xa0\x16\xf1\x46\xb4\xf7\xeb\x86\xb8\xfe\xae\xc3\xed\xf7\x12\xf8\xea\x45\x51\x74\x90\xa6\x4e\xe0\x5d\x95\xb3\x77\xf1\xb7\x68\x8c\xbe\x43\x7b\xe3\xab\x95\x04\x81\x08\x55\xb1\x32\xde\x1b\xd9\xe0\xa0\x65\x81\x24\xf0\x05\xa1\x58\x32\xee\xc4\x46\xe8\x49\xb4\x36\x8f\x16\xa0\x6b\xa0\xab\x72\x36\x41\x51\x0e\x72\x8a\x8b\x22\xb1\xe8\x95\x7e\xcb\xd1\x29\x3c\xda\x8e\xb2\x6a\xa9\x95\xcd\x25\x2b\x62\x4d\xa6\xc6\x33\xf6\x9f\x79\x48\x86\x6b\x86\x73\x48\xd9\x0d\xf0\xd5\x67\x68\x04\x6e\x45\x7b\x64\x0b\x34\xc5\xe0\x67\x68\x83\x02\x0b\x99\x34\xd5\xe5\x83\x9b\xa2\x7d\x5d\x75\xc9\x4c\x09\x1a\x7e\x04\xae\xe5\x6d\xee\xac\x98\x3d\xb3\x55\x22\xf7\x5e\x57\x09\x90\xe7\x50\x00\x16\xee\x4b\x0f\x6e\xda\x3a\xaf\x87\xba\x40\xc5\x85\x54\xa7\xef\x28\x65\x8b\x25\x96\xe4\x8a\x14\x44\xae\xa6\xb1\x9d\xaf\x9f\xf0\xb4\x69\x99\xd7\x3b\x7d\x79\x49\x85\x94\xa2\x59\xf2\x5a\xf0\x9a\x49\x18\x9c\xed\xbe\xf7\x91\xec\x25\x5c\x95\x39\x22\x02\x61\xba\x42\x6c\x86\x22\x5b\xf3\x8b\x89\x01\x6a\xc4\xc4\x1c\xba\xc5\xa4\x60\xf9\x44\xde\xd2\x68\x17\x9d\xec\xe6\x07\x15\x21\xef\x53\x4f\xd7\xe5\x5f\x45\xc3\xd4\x82\x2e\x36\xa7\x5f\x6f\x65\x8a\xfb\x2b\x3a\x63\x8e\x3d\xad\x54\xee\xdf\xdb\x68\x9d\xf5\xf8\x84\xa8\x09\x56\x65\x3b\x36\xac\xb0\xfd\xb3\x1b\x9c\xfd\x08\xc5\x12\xdc\xd7\x32\xda\xe3\x6f\x38\x31\x37\x5f\xd5\x03\xff\xe6\xfc\xed\xdf\x45\x0e\x3f\x50\x55\xb7\x96\x86\x4c\x08\xbd\xb1\xc7\x2a\xff\xd9\x4b\x73\xe9\x1d\x04\x73\xea\x47\x38\xf5\x1f\xcb\x55\x84\x5a\x0f\x82\x2a\xb5\x7a\x2f\x72\xce\x01\x67\x84\xe6\xbb\x48\xbf\x58\xb2\xf7\x39\xd5\x2c\x3d\xc2\x7d\xb4\x1f\xd8\x6a\xf5\xa0\x5a\xec\x8a\x44\xad\xb1\xee\xd6\x01\x6c\xbb\x8c\xbc\xbb\xed\x3f\x6d\xb8\x86\xd5\x28\x4c\xd9\xc3\x39\x42\xef\xe0\x5b\xef\xd8\x75\x14\x1c\xb6\xa0\x51\x7d\x94\xec\xc3\x60\x6a\x34\xf2\xe4\x97\x93\xd3\xcb\xe4\xc7\x17\xa7\x2f\x5f\x9f\x9c\xd7\x28\x95\x01\x25\x1f\xe8\xff\x15\xb0\x3e\x77\x8c\xaf\xc6\xa9\xef\xaf\x0e\xbe\x52\x5f\x6a\x9c\xb6\xd6\x01\x3a\xe1\x9c\xf1\xe6\x72\x6d\x27\x60\xf0\x9f\x0d\x24\x67\x07\xb5\xb0\x11\x21\xb9\xc6\xf5\x62\xfd\x17\xbc\x5d\x13\xc2\x2d\x91\xf1\x37\xa3\xc3\x9d\x8f\x9b\x94\xbb\xdf\xff\x75\xf0\xc8\x1a\xd7\x00\x45\xad\x6f\xeb\x69\xc7\x7d\x15\xbf\xcf\x7f\xc3\xf0\xa9\xf4\xae\x60\x99\xcd\xda\xff\x37\x00\x00\xff\xff\x62\x50\x53\xad\x7d\x43\x00\x00")

func includeWt_raiiHBytes() ([]byte, error) {
	return bindataRead(
		_includeWt_raiiH,
		"include/wt_raii.h",
	)
}

func includeWt_raiiH() (*asset, error) {
	bytes, err := includeWt_raiiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "include/wt_raii.h", size: 17277, mode: os.FileMode(436), modTime: time.Unix(1648736977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/wt_raii.h": includeWt_raiiH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"include": &bintree{nil, map[string]*bintree{
		"wt_raii.h": &bintree{includeWt_raiiH, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

