// Code generated by go-bindata.
// sources:
// include/wt_raii.h
// DO NOT EDIT!

package wt_concurrency

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _includeWt_raiiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\xb2\xf3\x4f\x29\x55\x91\xeb\xce\xff\x72\x1d\x3b\xf2\x5c\xea\xba\xd7\x4c\x53\xfb\xc6\x76\x9a\x17\x6d\x87\x03\x53\x2b\x0a\x63\x0a\x50\x01\xd0\xb5\x9a\x49\x3f\xfb\x0d\x1e\x08\x12\x20\xa8\x07\x3f\x5c\x52\xbd\x88\x1c\x02\x58\xec\x13\x16\xbb\xbf\xa5\x3e\x27\x34\x2f\xab\x29\xa0\xe4\x0f\xc2\x61\x2a\x49\x01\x7c\x3c\x4f\xf6\xf6\xdc\xc0\x4b\xc2\x84\xe4\x80\x17\xc7\xad\x67\xa2\x7e\xb4\x97\x97\x58\x08\xf4\x4e\x5e\x82\x10\x84\xd1\xa3\xbd\x5b\x46\xa6\x88\xd0\x5b\xcc\x09\xa6\xf2\x7b\x4c\x4a\x98\xbe\x23\x72\xfe\x86\x50\x10\x29\xa1\x12\x71\x90\x23\x94\x33\x2a\x24\xca\xe7\x98\x0f\xd1\x8c\x94\x30\x42\x15\x15\xa4\xa0\x30\x45\x25\xa1\x30\xd8\x44\xe8\xdd\x55\x76\x79\x7a\x79\xf9\xfa\xfc\x6c\x88\x84\xd9\x7b\x84\x1e\x8f\x7a\x2d\xcf\xb3\x7b\x11\xdf\xfb\x7c\x0a\x33\x42\xa1\xd9\xe0\xdd\xd5\xf9\x8f\xa7\x58\xac\xd2\x19\x1d\xa0\xcd\x9f\x5f\xf7\xd4\xbf\xef\xb7\x98\xb9\x9e\x82\xfa\x28\xbe\x33\x0e\x12\x4d\xd0\x8c\x1e\xdd\x8b\xc2\x0c\xa5\x8a\xc2\x60\x47\x8e\x1a\x0a\x86\x8f\x1e\x65\x67\x5a\xab\x59\xf6\xfd\xeb\x37\xa7\x59\xa6\xfe\x7a\xf3\xfa\xec\x34\xcb\x06\x47\x2d\x0a\x1f\x76\xda\x39\xe4\xe1\x43\x8f\x49\x52\x67\xdd\xed\xec\x82\x1e\xc5\x36\x01\x29\xf4\x00\x23\xc5\x48\xdd\xd3\x5a\x11\x52\x68\x9d\xd9\x9c\xea\x9e\xd4\x7e\x01\x57\x71\x43\x2a\xd6\x76\x37\xe5\xdf\xc1\x90\x9f\x3d\xc4\x92\x9f\xb8\x21\xeb\xab\xe3\xa4\xe2\x82\x71\xf4\x7e\x6f\x59\x5d\x97\x24\x3f\xd4\xe3\xf5\xe3\x78\xa0\x17\x72\x7a\x78\x28\x24\x27\xb4\x40\x15\x27\xfe\x83\x9c\xd1\x19\x29\x06\xe8\xfd\x5e\x47\x74\x7d\xe6\x3d\xad\x34\x24\xcd\x1f\xcf\x8f\xd9\x12\x68\x96\x9b\xcd\xdd\x68\xc5\xc9\x38\xcf\x84\xe4\xe9\x60\x84\x68\x55\x96\x4b\xc9\x47\x76\xa7\x66\xe0\x99\x5d\x37\x18\x1c\xd5\x42\xfa\xb2\xd8\x3f\x9e\x3d\x43\x4c\xce\x81\x0f\xd0\x21\xaa\xb7\xd2\x0f\xc6\x35\x81\x16\xf3\xde\x00\x9a\xd4\xbb\x47\x77\x78\x86\xd8\x12\x38\x96\x8c\x4f\x22\x9b\x35\x34\x1b\x6a\x1e\xf5\xa3\xed\x36\x55\x1f\x0e\xb2\xe2\x14\x0d\xe5\x9c\x08\x8f\x95\xbf\x9c\xb4\x9e\x05\x54\x50\xea\xca\xd6\x35\x8e\x9d\xf4\xfc\xb8\xf1\xca\xfa\x49\x5e\x32\x01\x69\xa0\x62\xb3\x73\x5b\x15\x57\xd9\xc9\xdb\x8b\xcb\xf3\x8b\xa1\xd3\xc5\xf3\xe3\x74\x60\x6f\xed\xf7\xa1\x00\x9e\xe4\x5d\x12\x05\x48\x4f\x8e\x35\xab\xf6\x87\x43\x33\x6d\x88\xfe\x65\xa7\x49\x5e\x01\x62\x14\x2d\x18\x07\x04\x54\x72\x02\x62\x6c\x27\xed\xeb\xef\x6b\xc6\x4a\x44\xe1\x2e\xba\xcb\x67\x4e\x74\x3d\xa3\x96\xdc\xdb\x55\x13\x58\x72\xb8\x5d\x4f\x40\xcf\x88\x12\xd0\x89\x90\x00\xf9\x23\xac\x54\x76\xf6\xe2\xff\x33\x89\x6e\x60\x15\xf1\x16\x65\x13\x99\xdd\xc0\xaa\x26\x34\xd2\x13\xa3\xd4\x7e\xc6\x65\x05\x8e\xde\xad\xfa\x5f\x2f\x45\x3d\xda\xd0\x34\x93\xa3\x54\xbf\x5d\x49\x30\x94\x4d\xf6\xf5\x28\x74\x39\x2c\xd8\x2d\xa4\xbd\xf1\x42\xa7\x6d\x8e\xb0\x9d\x1d\x3f\xe8\xb5\xbc\x85\x51\xa7\x4f\xd2\x0c\x71\x90\x47\xdb\xec\x53\x84\xaa\x7e\xa6\x2e\x82\x41\xe7\x00\x3a\x7a\x96\x85\x76\x20\x34\x6c\x5c\xea\xff\x78\xcc\x34\xb9\x2b\xc5\x0b\xb8\x27\x3f\xf5\xf2\x08\x53\x2d\x26\x52\x37\xad\x4f\x53\xaf\xa9\xf5\x96\x87\xaa\x2b\xb0\xf7\x96\x0a\x33\xba\x28\xda\xce\xd5\x73\x0c\xec\x21\x69\x7c\x1e\xf9\x81\x4d\x79\x1d\xe6\xf9\xbc\x09\x74\x93\x89\x8a\x25\x67\xe7\x57\xdf\x9f\xbf\x3d\xfb\x2e\x0c\x7c\x5a\x4b\x39\xab\x24\x7a\xf9\x12\x25\xbf\x2a\xe2\x88\x32\x89\x66\xac\xa2\xd3\x91\xe5\x57\xd9\xf1\xf9\xc1\x18\xfd\x08\xab\x43\x94\xa8\x99\x37\xb0\x52\x5f\x7a\x35\xd0\x69\x79\xe4\x11\xb5\x52\x76\xe2\xb5\x95\xb6\x91\xb8\x5f\xb3\xeb\x62\xf0\xfd\xf5\xac\x12\x23\x81\x83\x83\xe6\x87\xd3\xe7\xc7\x84\x0a\xe0\x3d\x91\x4e\x11\xb0\xe3\x2d\x03\x8d\x50\x6f\x90\x89\xda\xcb\xc5\xa6\x76\x38\x68\xbb\xae\x66\xb1\xcb\xb9\xb6\xec\xe9\x1d\xce\x65\x9f\x7b\x44\x5d\x36\xee\x33\x54\x22\xe0\xea\x5a\xed\xf3\x1c\xdf\xbf\xf4\xdc\xb5\xae\xb4\xbf\xff\xa4\xde\xf4\xfc\x20\xbc\x6c\x5b\xac\x85\xbc\xd8\x35\xc0\x79\x74\xd1\xff\xc6\xd3\x6c\x98\xde\xe5\x24\x87\xbe\x18\x44\x7a\xb7\xc5\x92\x93\x5b\x2c\xe1\x30\x4c\x15\x5c\x4e\xf0\xe1\xa8\x03\x8b\x74\x92\x5b\xfb\x5c\x65\xb7\x27\xe7\x67\x67\xa7\x27\x57\x3a\xc1\xcd\x19\xa5\x61\xda\xa4\x9e\xd9\xac\xd4\x6a\x49\x3f\x6a\xa5\xa1\x09\x11\xac\xc4\x92\x30\x3a\x11\x14\x2f\xc5\x9c\xc9\x44\x25\xa3\x76\xfa\x20\xb4\x90\x9c\x73\xf6\x07\x4a\x6a\xde\x14\x69\x34\xd3\x45\x41\xd2\x97\x54\x35\x0c\x3b\x64\xa4\x9d\xc3\xd6\x8c\xd9\xb4\xb1\xde\xb8\x9b\xc5\xda\x91\xde\x34\xd6\xc1\x2e\xed\x3c\xb6\xb3\x63\xeb\xc2\x6f\x08\xfa\x3b\x74\x52\xd9\x9e\x9d\xd1\x86\x5c\xb6\x96\xbb\x93\xcc\x46\x64\x8c\xf8\x77\xe3\xd7\xae\xbe\xb0\x69\xac\x1b\xb1\xec\xac\x4b\x68\x5d\x01\xb4\x55\x46\xeb\x69\x20\x42\xc4\xe4\xb4\xbb\xac\x56\x27\x2a\xe7\x80\x25\x5c\xe1\xeb\x12\xd2\x8d\xe5\x17\x9a\xa0\x24\xf1\x4e\x5c\x33\xc1\x40\x87\x48\x88\x56\x94\x14\x3a\x68\xdd\xc0\x2a\x9b\x31\xbe\xc0\x72\xf2\xfb\x48\x9f\xfd\xe6\xbf\x25\x2b\x26\x29\x50\xb5\xfd\x74\x32\xc3\xa5\x80\xc1\x48\x07\x30\xb5\x5d\xf7\x10\x37\xda\xd6\x6c\xb7\xd4\xed\x55\x72\x42\x8c\xf5\x5f\xf5\x93\x6e\xe0\x37\xeb\x5d\x6e\x10\x95\x3f\x76\xa3\x85\x0c\x78\x4e\xd2\xc3\xcd\x1a\x05\x54\x31\x05\x24\x7d\xec\x6a\x2e\x75\x81\xcf\x8a\x8f\xc0\x6c\x60\x2d\x55\x05\x85\xbc\xea\xcc\x1b\x97\x12\xb8\xe6\xf5\x0d\x2b\x0a\x95\x2c\x76\x1c\x4b\x97\x37\x86\x50\x78\x02\xbb\x4f\xb7\x3b\x7f\x7a\xd7\x3e\x87\x48\x62\x9c\xb7\x4f\x26\x82\x52\xc0\x53\xee\x59\x9b\xb6\x2f\x1c\x04\x9a\x3b\x61\x8b\x05\x91\x57\x64\x01\x42\xe2\xc5\xf2\x95\x50\x09\x12\x61\x54\xac\x3f\xa4\xb7\xc0\xc9\x8c\xe4\xfa\xd2\xf8\x39\x4c\x9c\xd6\xc0\x25\x4e\x84\xe8\xd3\x8e\xa0\xde\xac\xf0\xd3\x56\xc2\xda\x89\x69\x82\xb5\x58\x93\x34\xd7\xd2\x66\xb2\x16\x77\x92\xa0\x2f\xbb\xb2\xa0\x2f\x51\x32\x48\x9a\x43\x3d\xe8\xad\xd3\x97\x98\xe3\x05\xe2\xf0\x7b\x45\x38\x4c\x51\x8e\x29\xba\x06\xf4\x0b\x2e\xff\xc0\x2b\x31\x42\x14\x6e\x81\x8f\x10\x65\x14\x7e\xf3\xeb\x76\x75\xd6\x1a\x23\x5c\x18\x02\x81\x2d\x36\x98\xa0\xde\x75\xe7\x30\xb9\x46\x19\x2f\x5f\x36\xc2\xa8\xa9\x83\x64\x4d\x68\x5c\xeb\x94\x9b\x23\xe3\x94\xb3\xe5\xee\xe1\x50\xad\xea\xdb\xb3\xbe\x09\xa3\xd0\x96\x4e\x53\x2c\xb2\xb4\x05\xfc\xd7\xb9\x81\x2c\x27\x0e\x9d\xf2\x78\xa8\xa1\xbc\x35\x5b\x7f\x8b\xf3\x9b\x6a\x19\x81\xb6\xfa\x09\x27\xd7\x7a\xcd\x61\x32\x52\xbc\x44\x72\x54\x3c\x7d\xd5\xb8\x8b\x91\xaa\xaa\x53\x56\x67\xd6\xb0\x70\xd7\xeb\xae\x2e\x4f\x34\xc3\xa6\xb8\xff\xe5\xe0\x1f\x68\x7f\xa8\x07\x5a\xee\x80\x86\xfb\xe8\x4b\x74\xf0\x42\x0d\x1d\xbc\x40\x73\xb8\xc3\x53\xc8\xc9\x02\x97\x68\x4a\x0a\x22\x85\x9e\xb0\xf6\xe4\xa9\xcf\xc1\x3f\x15\x81\x11\x57\x75\x44\x26\x59\xc6\xca\x29\x08\x69\xa9\xeb\x7d\x75\xc8\xb2\xbb\xa9\xff\x4b\x8e\x49\xa9\x4c\xa1\x0c\x8a\x86\xfb\xbf\x35\x4e\x88\x2b\xc9\x90\x20\x7f\x02\x9a\x58\xa3\xd1\x25\x27\x54\xce\xd2\xae\x54\xeb\x83\x82\x3d\x12\xe4\x4f\x60\xb1\xc5\x1b\x42\x8a\xf9\x24\x81\xc6\xfe\xaf\x2c\xef\x3a\x82\x6a\xe9\x92\xad\x98\x91\x58\x92\x3c\xcb\xb1\x90\x2f\x9b\x96\x20\xa3\x85\xfe\xe7\x38\x6d\x4c\x1a\x29\x3b\xdc\x09\x71\xb3\x32\xc9\x31\x15\x38\x57\x71\xad\xe5\x55\x11\x59\x3b\xae\x75\x0d\x05\xa1\x4f\xef\x5b\xe9\x37\x68\x88\xbe\x1e\xa8\xf1\x6f\x3c\xff\x52\xb4\x70\x2e\x81\x6f\xeb\x63\x7f\x7b\xb7\x79\x3a\x07\xd9\x9c\x5d\x68\x6b\x6f\xef\x2d\x5d\xe7\xfb\x2a\xee\x40\xa9\xce\xbe\x48\x41\x19\x87\xff\x70\x58\x62\xae\xf4\x6f\x12\x94\x20\x19\xf3\x26\xf5\x20\x02\xdb\x31\x9c\x18\x52\xd9\xd2\xd0\xd2\x39\x58\xb2\x29\x03\xdb\x69\x07\xff\x9a\x41\x61\x82\xa5\x43\x33\x2b\x4b\x15\xbc\xa3\x60\x95\xdb\xa4\x9e\xb5\xd5\x3e\xed\x24\x5d\x5f\xdc\xfa\x5d\x08\x65\x71\x34\x41\x5f\x85\xfa\x54\xcf\xa3\x78\x61\x6f\x72\x80\x9a\x04\x21\x9e\x18\xe8\xe5\x73\xb8\x53\x7f\xab\x21\x7f\xa9\x29\x07\x23\x75\x5c\x9d\x08\x44\x81\xa1\x56\xe5\x60\xf7\x8c\x6a\x42\x91\x0a\x12\x89\xed\x4d\xb9\x96\xf2\x16\xb6\xb4\x8e\xe4\xd4\xbd\x73\xbe\x65\x09\x6c\xaf\xcf\x1d\x74\x69\x5f\x2a\x41\x93\x96\xc0\x6e\xbf\x5d\x74\xe9\xc3\x7f\xea\x20\x5e\x80\xb4\x18\x9f\xda\x20\x8e\xf1\xad\xc3\x6a\xa1\x75\x7d\xdc\x5b\x77\xbb\xba\xe2\x0e\xaa\xdb\xf9\xe2\x8c\x68\xae\x25\xaf\xe4\x15\xcd\xb1\x84\x57\x33\x95\x15\x37\x0d\x55\x21\x31\x97\x6b\xc3\x40\xbd\xb2\xeb\x96\x23\xb3\x7a\xac\x11\x97\xd6\xd3\x4e\x64\x08\x31\x45\x87\xd5\x34\x70\x4c\x83\x2a\xfe\x04\x12\x4f\xb1\xc4\xd1\xbe\xb9\x3f\xe8\x81\x67\x0e\xb1\x6a\x01\x76\x5a\xd3\x1a\xe7\x8c\x81\x85\x0f\x28\x04\xdb\x5d\xf4\xfa\x69\xad\x87\x64\x61\x99\x54\x99\x71\xa8\x94\xde\x2e\x7a\x20\x76\x03\x10\x1a\x9f\xf1\x87\x1d\x54\x38\x41\x53\x28\x41\xc2\x51\x8c\x48\x1a\x2c\xaa\x57\x39\x99\xa2\x9a\x0a\x40\xce\x81\x03\xad\xd3\xda\xae\xe8\xfd\x47\xed\x09\xb7\x5f\x50\x8b\xb4\x22\xdb\xc3\xeb\xba\x40\x71\x4c\xfe\x3e\x4d\xc9\x80\xa1\x6e\xbb\xef\x61\x2c\xed\xde\x26\xf0\xcf\x9b\x43\xe9\x7d\xf0\x73\x13\xb6\x7f\xc2\x68\x17\xd8\x57\x0f\xbd\xfa\x74\x7a\xbd\xc4\x72\xde\x5b\xa2\x5a\x88\x4b\x48\x0d\xe6\xcc\x21\xbf\x59\x32\x42\xe5\x39\x3d\x29\x99\x50\xa9\x81\xc6\xa0\x3c\x87\x8c\x4f\x4d\x7b\x9e\xef\x1e\xb2\x35\x06\x38\xca\x71\x3e\x87\x4c\x25\xca\x93\x83\x7f\x7f\x1b\x43\xf4\xfc\x26\x95\x7d\x17\xa6\x04\x5a\xc8\x79\x3a\x40\xc7\x7e\x52\xd3\xda\xa0\xc1\x6d\x49\x11\x6d\x50\x66\x73\x4c\xa7\x25\xf0\xb1\xf9\xce\x80\xf3\xf8\x4b\x28\xe1\xc4\x05\x08\x81\x0b\xd8\x66\xea\x92\xb3\x82\x83\x10\xdb\xcc\xcd\xad\x29\x3a\x13\x95\xdc\xcd\x7b\xb3\x99\x8a\x79\xa9\xb1\x77\xfb\x9d\x20\x4b\xad\x8b\xa9\xe8\x50\xc7\x68\x6f\x83\x26\x20\xbd\xb1\x47\xa3\x7d\xcf\x7c\xf5\xc5\xbf\xbf\xec\xac\x6e\x3b\x63\xb3\xf7\xa0\x58\xa3\xf1\xad\x50\x0e\xed\xae\x5e\xa1\x42\x9b\xd6\xd7\x38\x59\xd3\x57\x34\x5d\x73\xdd\xd8\xaa\xdf\xea\xd1\x2d\xad\xa4\x12\xed\x3c\xcb\xe4\xfe\x21\x0f\x96\x8f\xae\x92\x8c\x9d\x3a\x5a\x42\x5e\x03\x32\x8e\xe0\x6e\xc7\x8f\x81\x02\x1e\x9b\x21\xdf\x88\x75\x2c\x2a\x20\xda\x7b\x72\x68\x53\x3d\x68\x3c\xa8\x9b\xbe\x05\xf6\xf4\x88\x34\xbb\x34\x5d\xb1\xf6\x7e\xdd\xae\xb8\x4b\xc6\x1b\x82\xe1\xa5\x1e\x33\x5d\x87\xad\x8a\x7e\x6c\xc6\xac\x0d\x63\xf9\xee\xa5\x66\xad\x0f\x34\x11\xfe\x68\x07\x3a\xb1\xe3\x01\x78\xa2\xc1\xb3\xc4\x8c\x85\xf8\xc9\x16\x88\x41\x0b\x61\xe9\x87\xf0\x1e\x00\x9f\xc4\x98\xde\x01\x40\x89\x2d\xdf\x0e\x42\xe9\x68\xe4\xd1\x40\x94\xd0\x4e\xb1\x16\xbf\x3e\xe9\x02\x5a\x85\x49\x7d\xe2\xa3\x12\xc5\x9c\xe5\x5c\xa3\x83\x7d\xce\xc2\xfc\xd1\x8e\xb3\xd8\xf1\xa8\xb3\x98\xb1\x4f\xd0\x59\x62\x4c\xef\xe0\x2c\xb1\xe5\xdb\x39\x4b\x47\x23\x8f\xe6\x2c\xa1\x9d\x76\x73\x96\xa8\x44\xeb\x8a\x96\x02\x64\x50\x81\x44\x62\x7b\x30\xa3\x1d\xff\x1a\xe2\xfa\xdb\xb9\xdb\xef\x15\xf0\x95\x69\x3f\x49\x98\x36\x4e\xd9\xf1\xbb\xeb\x6a\xf6\x4b\xfa\x35\x1a\xa2\x6f\xd0\xfe\xf0\x7a\x25\x41\x20\x42\x95\xab\x0c\xf7\x07\xd6\x37\x68\x55\x22\x09\x7c\x41\xa8\x2a\xaf\x3c\xd7\x88\xbd\x80\xa7\xb5\xa3\xf7\xef\xea\xe7\xba\x9a\x8d\x50\x52\x80\x9c\xe0\xb2\xcc\xf2\x9a\x3f\xdd\xdc\xec\x44\xf2\xb6\xa5\xac\x5c\xea\x30\x73\xc9\xca\x54\x13\x72\x05\xe2\xc1\x8b\xa0\x34\xf4\xf5\x70\x01\x39\xbb\x05\xbe\xfa\x04\xd5\xc0\x2d\x6b\x4f\xac\x81\xe6\x76\xfd\x04\x75\x50\x62\x21\xb3\xe6\xba\x7e\x74\x55\xb4\xf1\xdb\x2b\x66\xee\xf4\xf8\x4b\x87\x9a\xdf\x06\xc4\x65\x36\x09\xae\x59\xee\xc5\x6f\x05\xc8\x0b\x28\x01\x0b\xbf\xf5\xc9\xcd\xb3\x4e\x3b\xbd\x5b\xf9\x5d\x4a\x55\xce\x24\x39\x5b\x2c\xb1\x24\xd7\xa4\x24\x72\x35\x49\xed\x7a\xdd\xd3\x6e\xd3\x32\xed\xec\xbe\xc0\xa4\x5c\x4a\xd1\xac\xb8\x63\xdc\x6d\x12\x47\xbb\xba\x0d\x70\xc9\xbe\x83\xeb\xaa\x40\x44\x20\x4c\x57\x88\xcd\x50\x62\x93\x28\x31\x32\x95\xaf\x18\x99\x2a\x46\xa8\x42\x70\x24\xef\x68\x32\x46\xa7\xe3\xe2\xb0\x26\x14\x7c\xdc\x72\x9d\x07\xd6\x34\x4c\x52\xe8\x83\x1d\xfa\x75\x86\xa9\xda\xfd\x35\x9d\x31\x4f\x9f\x96\x2b\xff\xfd\x6e\x2d\xb3\x9e\x9f\x11\xb5\xc0\x8a\x6c\xe7\xc6\x05\xb6\xaf\x79\xe3\xe9\x0f\x50\x2e\xc1\x6f\x1f\x6b\x8b\xbf\xe5\xc4\xfc\xbe\xaf\x7e\xa1\xb4\x29\x68\x42\x70\x7e\xfb\x0c\xb5\x86\xf1\x0d\x99\x58\x39\x6c\xf3\xd4\xb0\x0f\xdc\x74\x81\xa2\xd5\xb1\xeb\x4a\xbb\x1f\x67\xd4\x84\x5a\x1d\xf2\x5a\xac\x5e\x84\xf8\x02\xf0\x94\xd0\x62\x8c\x74\x0b\xdf\x02\xc5\xf5\x2a\x3d\xc3\x7f\x49\x34\x72\xd7\xea\x49\x8e\xed\x9a\x84\x93\x58\x0f\x6b\x07\xb6\x43\x86\xdf\x71\xfb\x55\xda\x1b\x58\x0d\xe2\x94\x83\xc2\x31\xf6\xde\x65\xeb\xbd\x49\xed\x05\x47\x2d\xac\x49\x83\x2a\x7d\x45\xad\x83\x77\x4e\x7f\x3e\x3d\xbb\xca\x7e\x78\x75\xf6\xdd\x9b\xd3\x0b\x57\xf6\x1b\x94\xe7\x91\x7e\xc7\x6a\x6d\xee\x29\x5f\xcd\x53\xdf\x5f\x1c\x7e\xa1\xbe\xd4\x3c\xad\xad\x43\x74\xca\x39\xe3\x0d\x6a\xbf\x17\x51\xf8\x4f\x06\xe3\xb0\x93\x5a\xc5\xa6\x90\x5c\x03\x25\xa9\xfe\xc5\x58\x57\x85\x70\x47\x64\xfa\xd5\xe0\x68\xef\xc3\x26\xe1\x1e\xf6\xdb\xda\x27\x96\xd8\x55\x7c\x4e\xde\x56\xaf\xf3\xa1\x82\x3f\xe4\x67\xbf\x1f\x4b\xee\xba\xce\xdd\x2c\xfd\x7f\x03\x00\x00\xff\xff\xcd\x7c\xb3\xe5\xed\x3d\x00\x00")

func includeWt_raiiHBytes() ([]byte, error) {
	return bindataRead(
		_includeWt_raiiH,
		"include/wt_raii.h",
	)
}

func includeWt_raiiH() (*asset, error) {
	bytes, err := includeWt_raiiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "include/wt_raii.h", size: 15853, mode: os.FileMode(420), modTime: time.Unix(1547774862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/wt_raii.h": includeWt_raiiH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"include": &bintree{nil, map[string]*bintree{
		"wt_raii.h": &bintree{includeWt_raiiH, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

