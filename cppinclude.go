// Code generated by go-bindata.
// sources:
// include/wt_raii.h
// DO NOT EDIT!

package wt_concurrency

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _includeWt_raiiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\xeb\x73\xdb\x36\xb6\xff\xee\xbf\x02\x65\xe7\xa6\x94\xaa\xc8\x75\xe7\xde\xdc\x8e\x1d\x79\x36\x75\xdd\x6d\xa6\xa9\xbd\x63\x3b\xcd\x87\xb6\xc3\x81\xa9\x23\x0a\x63\x0a\x50\x01\xd0\xb5\x9a\x49\xff\xf6\x1d\x3c\x08\x12\x20\xa8\x87\x1f\x9b\x74\xf5\x21\x72\x08\xe0\xbc\x71\x78\xf0\x3b\xd0\xe7\x84\xe6\x65\x35\x05\x94\xfc\x41\x38\x4c\x25\x29\x80\x8f\xe7\xc9\xde\x9e\x1b\x78\x49\x98\x90\x1c\xf0\xe2\xb8\xf5\x4c\xd4\x8f\xf6\xf2\x12\x0b\x81\xde\xc9\x4b\x10\x82\x30\x7a\xb4\x77\xcb\xc8\x14\x11\x7a\x8b\x39\xc1\x54\x7e\x8f\x49\x09\xd3\x77\x44\xce\xdf\x10\x0a\x22\x25\x54\x22\x0e\x72\x84\x72\x46\x85\x44\xf9\x1c\xf3\x21\x9a\x91\x12\x46\xa8\xa2\x82\x14\x14\xa6\xa8\x24\x14\x06\x9b\x08\xbd\xbb\xca\x2e\x4f\x2f\x2f\x5f\x9f\x9f\x0d\x91\x30\xbc\x47\xe8\xf1\xa8\xd7\xfa\x3c\xbb\x17\xf1\xbd\xcf\xa7\x30\x23\x14\x1a\x06\xef\xae\xce\x7f\x3c\xc5\x62\x95\xce\xe8\x00\x6d\xfe\xfc\xba\xa7\xfe\x7d\xbf\xc5\xcc\xf5\x14\xd4\x47\xc9\x9d\x71\x90\x68\x82\x66\xf4\xe8\x5e\x14\x66\x28\x55\x14\x06\x3b\x4a\xd4\x50\x30\x72\xf4\x18\x3b\xd3\x56\xcd\xb2\xef\x5f\xbf\x39\xcd\x32\xf5\xd7\x9b\xd7\x67\xa7\x59\x36\x38\x6a\x51\xf8\xb0\x13\xe7\x50\x86\x0f\x3d\x2e\x49\x9d\x77\xb7\xf3\x0b\x7a\x14\xdf\x04\xa4\xd0\x03\x9c\x14\x23\x75\x4f\x6f\x45\x48\xa1\x75\x6e\x73\xa6\x7b\x52\xff\x05\x52\xc5\x1d\xa9\x44\xdb\xdd\x95\x7f\x07\x47\x7e\xf6\x10\x4f\x7e\xe2\x8e\xac\x5f\x1d\x27\x15\x17\x8c\xa3\xf7\x7b\xcb\xea\xba\x24\xf9\xa1\x1e\xaf\x1f\xc7\x13\xbd\x90\xd3\xc3\x43\x21\x39\xa1\x05\xaa\x38\xf1\x1f\xe4\x8c\xce\x48\x31\x40\xef\xf7\x3a\xaa\xeb\x3d\xef\x59\xa5\x21\x69\xfe\x78\x7e\xcc\x96\x40\xb3\xdc\x30\x77\xa3\x15\x27\xe3\x3c\x13\x92\xa7\x83\x11\xa2\x55\x59\x2e\x25\x1f\x59\x4e\xcd\xc0\x33\xbb\x6e\x30\x38\xaa\x95\xf4\x75\xb1\x7f\x3c\x7b\x86\x98\x9c\x03\x1f\xa0\x43\x54\xb3\xd2\x0f\xc6\x35\x81\x96\xf0\xde\x00\x9a\xd4\xdc\xa3\x1c\x9e\x21\xb6\x04\x8e\x25\xe3\x93\x08\xb3\x86\x66\x43\xcd\xa3\x7e\xb4\x1d\x53\xf5\xe1\x20\x2b\x4e\xd1\x50\xce\x89\xf0\x44\xf9\xcb\x69\xeb\x79\x40\x25\xa5\xae\x6e\x5d\xe7\xd8\x49\xcf\x8f\x9b\xa8\xac\x9f\xe4\x25\x13\x90\x06\x26\x36\x9c\xdb\xa6\xb8\xca\x4e\xde\x5e\x5c\x9e\x5f\x0c\x9d\x2d\x9e\x1f\xa7\x03\xfb\xd6\x7e\x1f\x2a\xe0\x69\xde\x25\x51\x80\xf4\xf4\x58\xb3\x6a\x7f\x38\x34\xd3\x86\xe8\x1f\x76\x9a\xe4\x15\x20\x46\xd1\x82\x71\x40\x40\x25\x27\x20\xc6\x76\xd2\xbe\xfe\xbe\x66\xac\x44\x14\xee\xa2\x5c\x3e\x73\xaa\xeb\x19\xb5\xe6\x1e\x57\x4d\x60\xc9\xe1\x76\x3d\x01\x3d\x23\x4a\x40\x17\x42\x02\xe4\x8f\xb0\x52\xd5\xd9\x8b\xff\xcd\x24\xba\x81\x55\x24\x5a\x94\x4f\x64\x76\x03\xab\x9a\xd0\x48\x4f\x8c\x52\xfb\x19\x97\x15\x38\x7a\xb7\xea\x7f\xbd\x14\xf5\x68\x43\xd3\x4c\x8e\x52\xfd\x76\x25\xc1\x50\x36\xd5\xd7\xa3\xd0\xe5\xb0\x60\xb7\x90\xf6\xe6\x0b\x5d\xb6\x39\xc2\x76\x76\x7c\xa3\xd7\xfa\x16\xc6\x9c\x3e\x49\x33\xc4\x41\x1e\x6d\xc3\xa7\x08\x4d\xfd\x4c\xbd\x08\x06\x9d\x0d\xe8\xe8\x59\x11\xda\x89\xd0\x88\x71\xa9\xff\xe3\x09\xd3\xd4\xae\x14\x2f\xe0\x9e\xf2\xd4\xcb\x23\x42\xb5\x84\x48\xdd\xb4\x3e\x4b\xbd\xa6\x36\x5a\x1e\x6a\xae\xc0\xdf\x5b\x1a\xcc\xd8\xa2\x68\x07\x57\xcf\x36\xb0\x9b\xa4\x89\x79\xe4\x27\x36\x15\x75\x98\xe7\xf3\x26\xd1\x4d\x26\x2a\x97\x9c\x9d\x5f\x7d\x7f\xfe\xf6\xec\xbb\x30\xf1\x69\x2b\xe5\xac\x92\xe8\xe5\x4b\x94\xfc\xaa\x88\x23\xca\x24\x9a\xb1\x8a\x4e\x47\x56\x5e\xe5\xc7\xe7\x07\x63\xf4\x23\xac\x0e\x51\xa2\x66\xde\xc0\x4a\x7d\xe9\xd5\x40\xa7\xe5\x91\x47\xd4\x6a\xd9\xc9\xd7\x56\xdb\x46\xe3\x7e\xcb\xae\xcb\xc1\xf7\xb7\xb3\x2a\x8c\x04\x0e\x36\x9a\x9f\x4e\x9f\x1f\x13\x2a\x80\xf7\x64\x3a\x45\xc0\x8e\xb7\x1c\x34\x42\xbd\x49\x26\xea\x2f\x97\x9b\xda\xe9\xa0\x1d\xba\x5a\xc4\xae\xe4\xda\xb3\xa7\x77\x38\x97\x7d\xe1\x11\x0d\xd9\x78\xcc\x50\x89\x80\xab\xd7\x6a\x5f\xe4\xf8\xf1\xa5\xe7\xae\x0d\xa5\xfd\xfd\x27\x8d\xa6\xe7\x07\xe1\xcb\xb6\x25\x5a\x28\x8b\x5d\x03\x9c\x47\x17\xfd\x67\x22\xcd\xa6\xe9\x5d\x76\x72\x18\x8b\x41\xa6\x77\x2c\x96\x9c\xdc\x62\x09\x87\x61\xa9\xe0\x6a\x82\x0f\x47\x1d\x58\xa4\x53\xdc\xda\xe7\xaa\xba\x3d\x39\x3f\x3b\x3b\x3d\xb9\xd2\x05\x6e\xce\x28\x0d\xcb\x26\xf5\xcc\x56\xa5\xd6\x4a\xfa\x51\xab\x0c\x4d\x88\x60\x25\x96\x84\xd1\x89\xa0\x78\x29\xe6\x4c\x26\xaa\x18\xb5\xd3\x07\xa1\x87\xe4\x9c\xb3\x3f\x50\x52\xcb\xa6\x48\xa3\x99\x3e\x14\x24\x7d\x45\x55\x23\xb0\x43\x46\xda\x35\x6c\x2d\x98\x2d\x1b\x6b\xc6\xdd\x2a\xd6\x8e\xf4\x96\xb1\x0e\x76\x69\xd7\xb1\x1d\x8e\xad\x17\x7e\x43\xd0\xe7\xd0\x29\x65\x7b\x38\xa3\x0d\xb5\x6c\xad\x77\xa7\x98\x8d\xe8\x18\x89\xef\x26\xae\xdd\xf9\xc2\x96\xb1\x6e\xc4\x8a\xb3\xae\xa0\x75\x07\xa0\xad\x2a\x5a\xcf\x02\x11\x22\xa6\xa6\xdd\x65\xb5\xda\x51\x39\x07\x2c\xe1\x0a\x5f\x97\x90\x6e\x3c\x7e\xa1\x09\x4a\x12\x6f\xc7\x35\x13\x0c\x74\x88\x84\x68\x65\x49\xa1\x93\xd6\x0d\xac\xb2\x19\xe3\x0b\x2c\x27\xbf\x8f\xf4\xde\x6f\xfe\x5b\xb2\x62\x92\x02\x55\xec\xa7\x93\x19\x2e\x05\x0c\x46\x3a\x81\x29\x76\xdd\x4d\xdc\x58\x5b\x8b\xdd\x32\xb7\x77\x92\x13\x62\xac\xff\xaa\x9f\x74\x13\xbf\x59\xef\x6a\x83\xa8\xfe\xb1\x37\x5a\x28\x80\x17\x24\x3d\xd2\xac\x31\x40\x15\x33\x40\xd2\x27\xae\x96\x52\x1f\xf0\x59\xf1\x11\x84\x0d\xbc\xa5\x4e\x41\xa1\xac\xba\xf2\xc6\xa5\x04\xae\x65\x7d\xc3\x8a\x42\x15\x8b\x9d\xc0\xd2\xc7\x1b\x43\x28\xdc\x81\xdd\xa7\xdb\xed\x3f\xcd\xb5\x2f\x20\x92\x98\xe4\xed\x9d\x89\xa0\x14\xf0\x94\x3c\x6b\xd7\xf6\xa5\x83\xc0\x72\x27\x6c\xb1\x20\xf2\x8a\x2c\x40\x48\xbc\x58\xbe\x12\xaa\x40\x22\x8c\x8a\xf5\x9b\xf4\x16\x38\x99\x91\x5c\xbf\x34\x7e\x0e\x0b\xa7\x35\x70\x89\x53\x21\xfa\xb4\xa3\xa8\x37\x2b\xfc\xb4\x8d\xb0\x76\x62\x9a\x60\xad\xd6\x24\xcd\xb5\xb6\x99\xac\xd5\x9d\x24\xe8\xcb\xae\x2e\xe8\x4b\x94\x0c\x92\x66\x53\x0f\x7a\xcf\xe9\x4b\xcc\xf1\x02\x71\xf8\xbd\x22\x1c\xa6\x28\xc7\x14\x5d\x03\xfa\x05\x97\x7f\xe0\x95\x18\x21\x0a\xb7\xc0\x47\x88\x32\x0a\xbf\xf9\xe7\x76\xb5\xd7\x1a\x27\x5c\x18\x02\x81\x2f\x36\xb8\xa0\xe6\xba\x73\x9a\x5c\x63\x8c\x97\x2f\x1b\x65\xd4\xd4\x41\xb2\x26\x35\xae\x0d\xca\xcd\x99\x71\xca\xd9\x72\xf7\x74\xa8\x56\xf5\xf1\xac\xdf\x84\x51\x68\x4b\x97\x29\x16\x59\xda\x02\xfe\xeb\xbc\x81\xac\x24\x0e\x9d\xf2\x64\xa8\xa1\xbc\x35\xac\xbf\xc5\xf9\x4d\xb5\x8c\x40\x5b\xfd\x84\x93\x6b\xbd\xe6\x30\x19\x29\x59\x22\x35\x2a\x9e\xbe\x6a\xc2\xc5\x68\x55\xd5\x25\xab\x73\x6b\x78\x70\xd7\xeb\xae\x2e\x4f\xb4\xc0\xe6\x70\xff\xcb\xc1\xff\xa1\xfd\xa1\x1e\x68\x85\x03\x1a\xee\xa3\x2f\xd1\xc1\x0b\x35\x74\xf0\x02\xcd\xe1\x0e\x4f\x21\x27\x0b\x5c\xa2\x29\x29\x88\x14\x7a\xc2\xda\x9d\xa7\x3e\x07\xff\xaf\x08\x8c\xb8\x3a\x47\x64\x92\x65\xac\x9c\x82\x90\x96\xba\xe6\xab\x53\x96\xe5\xa6\xfe\x2f\x39\x26\xa5\x72\x85\x72\x28\x1a\xee\xff\xd6\x04\x21\xae\x24\x43\x82\xfc\x09\x68\x62\x9d\x46\x97\x9c\x50\x39\x4b\xbb\x5a\xad\x4f\x0a\x76\x4b\x90\x3f\x81\xc5\x16\x6f\x48\x29\xe6\x93\x04\x16\xfb\x9f\xb2\xbc\xeb\x28\xaa\xb5\x4b\xb6\x12\x46\x62\x49\xf2\x2c\xc7\x42\xbe\x6c\x5a\x82\x8c\x16\xfa\x9f\xe3\xb4\x71\x69\xe4\xd8\xe1\x76\x88\x9b\x95\x49\x8e\xa9\xc0\xb9\xca\x6b\xad\xa8\x8a\xe8\xda\x09\xad\x6b\x28\x08\x7d\xfa\xd8\x4a\xbf\x41\x43\xf4\xf5\x40\x8d\x7f\xe3\xc5\x97\xa2\x85\x73\x09\x7c\xdb\x18\xfb\xdb\x87\xcd\xd3\x05\xc8\xe6\xea\x42\x7b\x7b\xfb\x68\xe9\x06\xdf\x57\xf1\x00\x4a\x75\xf5\x45\x0a\xca\x38\xfc\x8b\xc3\x12\x73\x65\x7f\x53\xa0\x04\xc5\x98\x37\xa9\x07\x11\xd8\x4e\xe0\xc4\x90\xca\x96\x86\x96\xae\xc1\x92\x4d\x15\xd8\x4e\x1c\xfc\xd7\x0c\x0a\x0b\x2c\x9d\x9a\x59\x59\xaa\xe4\x1d\x05\xab\x1c\x93\x7a\xd6\x56\x7c\xda\x45\xba\x7e\x71\xeb\xbb\x10\xca\xe3\x68\x82\xbe\x0a\xed\xa9\x9e\x47\xf1\xc2\xde\xe2\x00\x35\x05\x42\xbc\x30\xd0\xcb\xe7\x70\xa7\xfe\x56\x43\xfe\x52\x73\x1c\x8c\x9c\xe3\xea\x42\x20\x0a\x0c\xb5\x4e\x0e\x96\x67\xd4\x12\x8a\x54\x50\x48\x6c\xef\xca\xb5\x94\xb7\xf0\xa5\x0d\x24\x67\xee\x9d\xeb\x2d\x4b\x60\x7b\x7b\xee\x60\x4b\x7b\xa9\x04\x4d\x5a\x0a\x3b\x7e\xbb\xd8\xd2\x87\xff\xd4\x46\xbc\x00\x69\x31\x3e\xc5\x20\x8e\xf1\xad\xc3\x6a\xa1\xf5\xfa\xb8\xb7\xed\x76\x0d\xc5\x1d\x4c\xb7\xf3\x8b\x33\x62\xb9\x96\xbe\x92\x57\x34\xc7\x12\x5e\xcd\x54\x55\xdc\x34\x54\x85\xc4\x5c\xae\x4d\x03\xf5\xca\x6e\x58\x8e\xcc\xea\xb1\x46\x5c\x5a\x4f\x3b\x99\x21\xc4\x14\x1d\x56\xd3\xc0\x31\x0d\xaa\xf8\x13\x48\x3c\xc5\x12\x47\xfb\xe6\xfe\xa0\x07\x9e\x39\xc4\xaa\x05\xd8\x69\x4b\x6b\x9c\x33\x06\x16\x3e\xe0\x20\xd8\xee\xa2\xd7\x4f\x6b\x3b\x24\x0b\x2b\xa4\xaa\x8c\x43\xa3\xf4\x76\xd1\x03\xb5\x1b\x80\xd0\xc4\x8c\x3f\xec\xa0\xc2\x09\x9a\x42\x09\x12\x8e\x62\x44\xd2\x60\x51\xbd\xca\xe9\x14\xb5\x54\x00\x72\x0e\x1c\x68\x9d\xd6\x7e\x45\xef\x3f\x6a\x4f\xb8\x7d\x41\x2d\xd2\x8a\x6c\x0f\xaf\xeb\x02\xc5\x31\xf9\xfb\x34\x25\x03\x81\xba\xed\xbe\x87\x89\xb4\x7b\x9b\xc0\xdf\x6f\x0e\xa5\xf7\xc1\xcf\x4d\xd8\xfe\x09\xa3\x5d\x60\x5f\x3d\xf4\xce\xa7\xd3\xeb\x25\x96\xf3\xde\x23\xaa\x85\xb8\x84\xd4\x60\xce\x1c\xf2\x9b\x25\x23\x54\x9e\xd3\x93\x92\x09\x55\x1a\x68\x0c\xca\x0b\xc8\xf8\xd4\xb4\xe7\xf9\xee\x29\x5b\x63\x80\xa3\x1c\xe7\x73\xc8\x54\xa1\x3c\x39\xf8\xe7\xb7\x31\x44\xcf\x6f\x52\xd9\xbb\x30\x25\xd0\x42\xce\xd3\x01\x3a\xf6\x8b\x9a\x16\x83\x06\xb7\x25\x45\xb4\x41\x99\xcd\x31\x9d\x96\xc0\xc7\xe6\x3b\x03\xce\xe3\x97\x50\xc2\x89\x0b\x10\x02\x17\xb0\xcd\xd4\x25\x67\x05\x07\x21\xb6\x99\x9b\x5b\x57\x74\x26\x2a\xbd\x9b\x7b\xb3\x99\xca\x79\xa9\xf1\x77\xfb\x4e\x90\xa5\xd6\xc5\x54\x74\xaa\x63\xb4\xb7\x41\x13\x90\xde\xd8\xa3\xd1\xb1\x67\xbe\xfa\xf2\xdf\x5f\x76\x56\xb7\x9d\xb1\x39\x7a\x50\xac\xd1\xf8\x56\xa8\x80\x76\xaf\x5e\xa1\x52\x9b\xb6\xd7\x38\x59\xd3\x57\x34\x5d\x73\xdd\xd8\xaa\x6f\xf5\xe8\x96\x56\x52\x89\x76\x9d\x65\x6a\xff\x50\x06\x2b\x47\xd7\x48\xc6\x4f\x1d\x2b\x21\xaf\x01\x19\x47\x70\xb7\x93\xc7\x40\x01\x8f\x2d\x90\xef\xc4\x3a\x17\x15\x10\xed\x3d\x39\xb4\xa9\x1e\x34\x11\xd4\x2d\xdf\x02\x7f\x7a\x44\x1a\x2e\x4d\x57\xac\xcd\xaf\xdb\x15\x77\xc5\x78\x43\x30\x7c\xa9\xc7\x5c\xd7\x11\xab\xa2\x1f\x5b\x30\xeb\xc3\x58\xbd\x7b\xa9\x45\xeb\x03\x4d\x84\x3f\x6a\x13\xf7\x8c\xf1\xbc\xf7\x54\xac\x07\xc3\x68\xd1\x38\x8b\x25\x16\x20\x2d\x1a\x69\x4b\xcc\x58\x08\xb6\x6c\x01\x2f\xa8\x4f\x0b\x92\xe9\xc7\xfc\xd0\x81\x06\x5c\x92\x91\x16\xd0\xf8\x6a\x17\x26\x9b\xe0\x1a\xb4\x16\xb2\x89\xe9\xbe\x0d\x7a\x82\x1a\xe0\x26\x46\x62\x2b\xe8\x46\x7d\xba\x06\xd6\xb8\x5f\xcb\x16\x5b\x4b\xb3\x01\xcf\x09\x42\x66\xd0\x73\x88\x36\x89\x47\x40\xeb\x9c\x54\x27\xa0\xa8\xa2\x1b\x4e\xd0\x9f\x44\x80\xfd\x17\x46\xc8\xdf\x28\x2c\x22\xc9\xed\x5c\xa3\xd9\x7d\xc9\x8d\xf9\xa3\x1d\x5c\xd8\x8e\x47\xc3\xc9\x8c\xdd\x23\x9c\x1e\x27\x94\xfa\xc3\x28\x26\xf4\x0e\xe8\x70\x6c\xf9\x76\xf8\x70\xc7\x22\x8f\x86\x10\x87\x7e\x8a\xdd\x5f\xea\x0f\x9b\xa8\x46\xeb\x0e\xd9\x05\xc8\xe0\xc4\x1c\xa9\x45\x82\x19\xed\xf7\x75\x43\x5c\x7f\xbb\x70\xfb\xbd\x02\xbe\x32\xed\x52\x09\xd3\x26\x28\x3b\x71\x77\x5d\xcd\x7e\x49\xbf\x46\x43\xf4\x0d\xda\x1f\x5e\xaf\x24\x08\x44\xa8\x0a\x95\xe1\xfe\xc0\xc6\x06\xad\x4a\x24\x81\x2f\x08\xc5\x92\x71\x2f\x34\x62\x17\x46\xb5\x75\x34\xff\xae\x7d\xae\xab\xd9\x08\x25\x05\xc8\x09\x2e\xcb\x2c\xaf\xe5\xd3\xcd\xf8\x4e\xe5\xd1\xf6\x94\xd5\x4b\x6d\x6d\x2e\x59\x99\x6a\x42\x0e\xd0\x38\x78\x11\x40\x19\xbe\x1d\x2e\x20\x67\xb7\xc0\x57\x9f\xa0\x19\xb8\x15\xed\x89\x2d\xd0\x54\x83\x9f\xa0\x0d\x4a\x2c\x64\xd6\x94\x97\x8f\x6e\x8a\x76\xbf\xe1\x8a\x99\x1a\x34\x7e\x49\x56\xcb\xdb\x34\x1d\x98\x3d\xb4\xd5\x22\xf7\xf6\x1b\x04\xc8\x0b\x28\x01\x0b\xbf\x55\xcf\xcd\xb3\xce\xf5\x8f\x2e\x52\x71\x29\xd5\xf1\x3b\xc9\xd9\x62\x89\x25\xb9\x26\x25\x91\xab\x49\x6a\xd7\xeb\x3b\x18\x6d\x5a\xe6\xfa\x45\x5f\x62\x52\x21\xa5\x68\x56\xdc\x09\xee\x98\xc4\xd1\xd9\xee\x85\x0d\xc9\xbe\x83\xeb\xaa\x40\x44\x20\x4c\x57\x88\xcd\x50\x62\x8b\x7e\x31\x32\x48\x8d\x18\x99\x53\xb7\x18\x95\xac\x18\xc9\x3b\x9a\x8c\xd1\xe9\xb8\x38\xac\x09\x05\x1f\xb7\x5c\xd7\x7f\x35\x0d\x53\x0c\xfa\xe0\x9c\xbe\x7e\x33\x55\xdc\x5f\xd3\x19\xf3\xec\x69\xa5\xf2\x7f\x8f\xa0\x75\xd6\xf3\x33\xa2\x16\x58\x95\xed\xdc\xb8\xc2\xf6\x67\x09\x78\xfa\x03\x94\x4b\xf0\xaf\x3b\x68\x8f\xbf\xe5\xc4\xfc\x1e\xb5\xbe\x00\xdd\x1c\xc0\xc3\x66\xd2\xf6\x27\xaa\xba\xed\x64\xc8\xc4\xe0\x1b\x7b\xae\x0a\xef\x2d\x34\x5d\xcb\x28\x9a\xe3\x6e\x51\xb8\x1f\x13\xd5\x84\x5a\x37\x3a\x6a\xb5\x7a\x3b\x1a\x17\x80\xa7\x84\x16\x63\xa4\xaf\x9c\xd8\xc6\x46\xbd\x4a\xcf\xf0\x2f\x35\x47\xde\xb5\x7a\x92\x13\xbb\x26\xe1\x34\xd6\xc3\x3a\x80\xed\x90\x91\x77\xdc\xbe\xfa\x7d\x03\xab\x41\x9c\x72\x00\x74\xc4\xee\x09\xb7\xee\xf9\xea\x28\x38\x6a\x61\xa3\xfa\x2c\xd9\x07\xc2\x38\x38\xf2\xf4\xe7\xd3\xb3\xab\xec\x87\x57\x67\xdf\xbd\x39\xbd\x70\x30\x95\x41\x25\x1f\xe9\x77\xd7\xd6\xe7\x9e\xf1\xd5\x3c\xf5\xfd\xc5\xe1\x17\xea\x4b\xcd\xd3\xd6\x3a\x44\xa7\x9c\x33\xde\x74\x99\xf6\x22\x06\xff\xc9\x60\x72\x76\x52\x0b\x1c\x11\x92\x6b\x60\x2f\xd5\xbf\x70\xec\x9a\x10\xee\x88\x4c\xbf\x1a\x1c\xed\x7d\xd8\xa4\xdc\xc3\x7e\x0b\xfe\xc4\x1a\x3b\x84\xc2\xe9\xdb\xea\xcd\x3f\x54\xf1\x87\xfc\x4c\xfd\x63\xe9\x5d\xe3\x32\x9b\xb5\xff\x77\x00\x00\x00\xff\xff\x24\x88\x51\x2a\x9d\x40\x00\x00")

func includeWt_raiiHBytes() ([]byte, error) {
	return bindataRead(
		_includeWt_raiiH,
		"include/wt_raii.h",
	)
}

func includeWt_raiiH() (*asset, error) {
	bytes, err := includeWt_raiiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "include/wt_raii.h", size: 16541, mode: os.FileMode(436), modTime: time.Unix(1591328504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/wt_raii.h": includeWt_raiiH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"include": &bintree{nil, map[string]*bintree{
		"wt_raii.h": &bintree{includeWt_raiiH, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
