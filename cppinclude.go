// Code generated by go-bindata.
// sources:
// include/wt_raii.h
// DO NOT EDIT!

package wt_concurrency

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _includeWt_raiiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x5b\x73\xdb\x36\x16\x7e\xf7\xaf\x40\xd9\xd9\x94\x52\x15\xb9\xee\xec\x66\x3b\x76\xe4\xd9\xd4\x75\xb7\x99\xa6\xf6\x8e\xed\x34\x0f\x6d\x87\x03\x53\x47\x14\xc6\x14\xa0\x02\xa0\x6b\x35\x93\xfe\xf6\x1d\x5c\x08\x12\x20\xa8\x8b\x2f\x93\x54\x0f\x91\x43\x00\xe7\x8e\x83\x83\xef\x50\x9f\x13\x9a\x97\xd5\x14\x50\xf2\x07\xe1\x30\x95\xa4\x00\x3e\x9e\x27\x7b\x7b\x6e\xe0\x25\x61\x42\x72\xc0\x8b\xe3\xd6\x33\x51\x3f\xda\xcb\x4b\x2c\x04\x7a\x27\x2f\x41\x08\xc2\xe8\xd1\xde\x2d\x23\x53\x44\xe8\x2d\xe6\x04\x53\xf9\x3d\x26\x25\x4c\xdf\x11\x39\x7f\x43\x28\x88\x94\x50\x89\x38\xc8\x11\xca\x19\x15\x12\xe5\x73\xcc\x87\x68\x46\x4a\x18\xa1\x8a\x0a\x52\x50\x98\xa2\x92\x50\x18\x6c\x22\xf4\xee\x2a\xbb\x3c\xbd\xbc\x7c\x7d\x7e\x36\x44\xc2\xf0\x1e\xa1\xc7\xa3\x5e\xeb\xf3\xec\x5e\xc4\xf7\x3e\x9f\xc2\x8c\x50\x68\x18\xbc\xbb\x3a\xff\xf1\x14\x8b\x55\x3a\xa3\x03\xb4\xf9\xf3\xeb\x9e\xfa\xf7\xfd\x16\x33\xd7\x53\x50\x1f\x25\x77\xc6\x41\xa2\x09\x9a\xd1\xa3\x7b\x51\x98\xa1\x54\x51\x18\xec\x28\x51\x43\xc1\xc8\xd1\x63\xec\x4c\x5b\x35\xcb\xbe\x7f\xfd\xe6\x34\xcb\xd4\x5f\x6f\x5e\x9f\x9d\x66\xd9\xe0\xa8\x45\xe1\xc3\x4e\x9c\x43\x19\x3e\xf4\xb8\x24\x75\xde\xdd\xce\x2f\xe8\x51\x7c\x13\x90\x42\x0f\x70\x52\x8c\xd4\x3d\xbd\x15\x21\x85\xd6\xb9\xcd\x99\xee\x49\xfd\x17\x48\x15\x77\xa4\x12\x6d\x77\x57\xfe\x1d\x1c\xf9\xd9\x43\x3c\xf9\x89\x3b\xb2\x3e\x3a\x4e\x2a\x2e\x18\x47\xef\xf7\x96\xd5\x75\x49\xf2\x43\x3d\x5e\x3f\x8e\x27\x7a\x21\xa7\x87\x87\x42\x72\x42\x0b\x54\x71\xe2\x3f\xc8\x19\x9d\x91\x62\x80\xde\xef\x75\x54\xd7\x7b\xde\xb3\x4a\x43\xd2\xfc\xf1\xfc\x98\x2d\x81\x66\xb9\x61\xee\x46\x2b\x4e\xc6\x79\x26\x24\x4f\x07\x23\x44\xab\xb2\x5c\x4a\x3e\xb2\x9c\x9a\x81\x67\x76\xdd\x60\x70\x54\x2b\xe9\xeb\x62\xff\x78\xf6\x0c\x31\x39\x07\x3e\x40\x87\xa8\x66\xa5\x1f\x8c\x6b\x02\x2d\xe1\xbd\x01\x34\xa9\xb9\x47\x39\x3c\x43\x6c\x09\x1c\x4b\xc6\x27\x11\x66\x0d\xcd\x86\x9a\x47\xfd\x68\x3b\xa6\xea\xc3\x41\x56\x9c\xa2\xa1\x9c\x13\xe1\x89\xf2\x97\xd3\xd6\xf3\x80\x4a\x4a\x5d\xdd\xba\xce\xb1\x93\x9e\x1f\x37\x51\x59\x3f\xc9\x4b\x26\x20\x0d\x4c\x6c\x38\xb7\x4d\x71\x95\x9d\xbc\xbd\xb8\x3c\xbf\x18\x3a\x5b\x3c\x3f\x4e\x07\xf6\xd4\x7e\x1f\x2a\xe0\x69\xde\x25\x51\x80\xf4\xf4\x58\xb3\x6a\x7f\x38\x34\xd3\x86\xe8\x3f\x76\x9a\xe4\x15\x20\x46\xd1\x82\x71\x40\x40\x25\x27\x20\xc6\x76\xd2\xbe\xfe\xbe\x66\xac\x44\x14\xee\xa2\x5c\x3e\x73\xaa\xeb\x19\xb5\xe6\x1e\x57\x4d\x60\xc9\xe1\x76\x3d\x01\x3d\x23\x4a\x40\x17\x42\x02\xe4\x8f\xb0\x52\xd5\xd9\x8b\x7f\x66\x12\xdd\xc0\x2a\x12\x2d\xca\x27\x32\xbb\x81\x55\x4d\x68\xa4\x27\x46\xa9\xfd\x8c\xcb\x0a\x1c\xbd\x5b\xf5\xbf\x5e\x8a\x7a\xb4\xa1\x69\x26\x47\xa9\x7e\xbb\x92\x60\x28\x9b\xea\xeb\x51\xe8\x72\x58\xb0\x5b\x48\x7b\xf3\x85\x2e\xdb\x1c\x61\x3b\x3b\xbe\xd1\x6b\x7d\x0b\x63\x4e\x9f\xa4\x19\xe2\x20\x8f\xb6\xe1\x53\x84\xa6\x7e\xa6\x0e\x82\x41\x67\x03\x3a\x7a\x56\x84\x76\x22\x34\x62\x5c\xea\xff\x78\xc2\x34\xb5\x2b\xc5\x0b\xb8\xa7\x3c\xf5\xf2\x88\x50\x2d\x21\x52\x37\xad\xcf\x52\xaf\xa9\x8d\x96\x87\x9a\x2b\xf0\xf7\x96\x06\x33\xb6\x28\xda\xc1\xd5\xb3\x0d\xec\x26\x69\x62\x1e\xf9\x89\x4d\x45\x1d\xe6\xf9\xbc\x49\x74\x93\x89\xca\x25\x67\xe7\x57\xdf\x9f\xbf\x3d\xfb\x2e\x4c\x7c\xda\x4a\x39\xab\x24\x7a\xf9\x12\x25\xbf\x2a\xe2\x88\x32\x89\x66\xac\xa2\xd3\x91\x95\x57\xf9\xf1\xf9\xc1\x18\xfd\x08\xab\x43\x94\xa8\x99\x37\xb0\x52\x5f\x7a\x35\xd0\x69\x79\xe4\x11\xb5\x5a\x76\xf2\xb5\xd5\xb6\xd1\xb8\xdf\xb2\xeb\x72\xf0\xfd\xed\xac\x0a\x23\x81\x83\x8d\xe6\xa7\xd3\xe7\xc7\x84\x0a\xe0\x3d\x99\x4e\x11\xb0\xe3\x2d\x07\x8d\x50\x6f\x92\x89\xfa\xcb\xe5\xa6\x76\x3a\x68\x87\xae\x16\xb1\x2b\xb9\xf6\xec\xe9\x1d\xce\x65\x5f\x78\x44\x43\x36\x1e\x33\x54\x22\xe0\xea\x58\xed\x8b\x1c\x3f\xbe\xf4\xdc\xb5\xa1\xb4\xbf\xff\xa4\xd1\xf4\xfc\x20\x3c\x6c\xb7\x09\x1a\xe0\x11\x45\x42\xc9\x2d\x07\xe0\xfc\x3e\x2c\x1e\x29\x2e\x6d\x52\xdf\x65\xdf\x87\x91\x1b\x9c\x0b\x8e\xc5\x92\x93\x5b\x2c\xe1\x30\x2c\x2c\x5c\x05\xf1\xe1\xa8\x03\xa2\x74\x4a\x61\xfb\x5c\xd5\xc2\x27\xe7\x67\x67\xa7\x27\x57\xba\x1c\xce\x19\xa5\x61\x91\xa5\x9e\xd9\x1a\xd6\x5a\x49\x3f\x6a\x15\xad\x09\x11\xac\xc4\x92\x30\x3a\x11\x14\x2f\xc5\x9c\xc9\x44\x95\xae\x76\xfa\x20\xf4\x90\x9c\x73\xf6\x07\x4a\x6a\xd9\x14\x69\x34\xd3\x57\x88\xa4\xaf\x04\x6b\x04\x76\x38\x4a\xbb\xe2\xad\x05\xb3\x45\x66\xcd\xb8\x5b\xf3\xda\x91\xde\xa2\xd7\x81\x34\xed\xaa\xb7\xc3\xb1\x55\x1e\x34\x04\x7d\x0e\x9d\xc2\xb7\x87\x33\xda\x50\xf9\xd6\x7a\x77\x4a\xdf\x88\x8e\x91\xf8\x6e\xe2\xda\xdd\x46\x6c\xd1\xeb\x46\xac\x38\xeb\xca\x5f\x77\x5d\xda\xaa\xfe\xf5\x2c\x10\x21\x62\x2a\xe0\x5d\x56\xab\x1d\x95\x73\xc0\x12\xae\xf0\x75\x09\xe9\xc6\xcb\x1a\x9a\xa0\x24\xf1\x76\x5c\x33\xc1\x00\x8d\x48\x88\x56\x4e\x15\x3a\xc5\xdd\xc0\x2a\x9b\x31\xbe\xc0\x72\xf2\xfb\x48\xef\xfd\xe6\xbf\x25\x2b\x26\x29\x50\xc5\x7e\x3a\x99\xe1\x52\xc0\x60\xa4\xd3\x9d\x62\xd7\xdd\xc4\x8d\xb5\xb5\xd8\x2d\x73\x7b\xf7\x3e\x21\xc6\xfa\xaf\xfa\x49\xf7\x98\x30\xeb\x5d\x25\x11\xd5\x3f\x76\xfe\x85\x02\x78\x41\xd2\x23\xcd\x1a\x03\x54\x31\x03\x24\x7d\xe2\x6a\x29\x35\x1c\xc0\x8a\x8f\x20\x6c\xe0\x2d\x75\x67\x0a\x65\xd5\x75\x3a\x2e\x25\x70\x2d\xeb\x1b\x56\x14\xaa\xb4\xec\x04\x96\xbe\x0c\x19\x42\xe1\x0e\xec\x3e\xdd\x6e\xff\x69\xae\x7d\x01\x91\xc4\x24\x6f\xef\x4c\x04\xa5\x80\xa7\xe4\x59\xbb\xb6\x2f\x1d\x04\x96\x3b\x61\x8b\x05\x91\x57\x64\x01\x42\xe2\xc5\xf2\x95\x50\xe5\x14\x61\x54\xac\xdf\xa4\xb7\xc0\xc9\x8c\xe4\xfa\xd0\xf8\x39\x2c\xb3\xd6\x80\x2b\x4e\x85\xe8\xd3\x8e\xa2\xde\xac\xf0\xd3\x36\xc2\xda\x89\x69\x82\xb5\x5a\x93\x34\xd7\xda\x66\xb2\x56\x77\x92\xa0\x2f\xbb\xba\xa0\x2f\x51\x32\x48\x9a\x4d\x3d\xe8\xbd\xd5\x2f\x31\xc7\x0b\xc4\xe1\xf7\x8a\x70\x98\xa2\x1c\x53\x74\x0d\xe8\x17\x5c\xfe\x81\x57\x62\x84\x28\xdc\x02\x1f\x21\xca\x28\xfc\xe6\xdf\xf2\xd5\x5e\x6b\x9c\x70\x61\x08\x04\xbe\xd8\xe0\x82\x9a\xeb\xce\x69\x72\x8d\x31\x5e\xbe\x6c\x94\x51\x53\x07\xc9\x9a\xd4\xb8\x36\x28\x37\x67\xc6\x29\x67\xcb\xdd\xd3\xa1\x5a\xd5\xc7\xb3\x3e\x09\xa3\x40\x98\x2e\x53\x2c\x0e\xb5\x05\x58\xd8\x39\x81\xac\x24\x0e\xcb\xf2\x64\xa8\x81\xbf\x35\xac\xbf\xc5\xf9\x4d\xb5\x8c\x00\x61\xfd\x84\x93\x6b\xbd\xe6\x30\x19\x29\x59\x22\x35\x2a\x9e\xbe\x6a\xc2\xc5\x68\x55\xd5\x25\xab\x73\x6b\x78\xcd\xd7\xeb\xae\x2e\x4f\xb4\xc0\x06\x0a\xf8\xe5\xe0\x5f\x68\x7f\xa8\x07\x5a\xe1\x80\x86\xfb\xe8\x4b\x74\xf0\x42\x0d\x1d\xbc\x40\x73\xb8\xc3\x53\xc8\xc9\x02\x97\x68\x4a\x0a\x22\x85\x9e\xb0\x76\xe7\xa9\xcf\xc1\xbf\x15\x81\x11\x57\xb7\x8e\x4c\xb2\x8c\x95\x53\x10\xd2\x52\xd7\x7c\x75\xca\xb2\xdc\xd4\xff\x25\xc7\xa4\x54\xae\x50\x0e\x45\xc3\xfd\xdf\x9a\x20\xc4\x95\x64\x48\x90\x3f\x01\x4d\xac\xd3\xe8\x92\x13\x2a\x67\x69\x57\xab\xf5\x49\xc1\x6e\x09\xf2\x27\xb0\xd8\xe2\x0d\x29\xc5\x7c\x92\xc0\x62\xff\x28\xcb\xbb\x8e\xa2\x5a\xbb\x64\x2b\x61\x24\x96\x24\xcf\x72\x2c\xe4\xcb\xa6\x81\xc8\x68\xa1\xff\x39\x4e\x1b\x97\x46\xae\x1d\x6e\x87\xb8\x59\x99\xe4\x98\x0a\x9c\xab\xbc\xd6\x8a\xaa\x88\xae\x9d\xd0\xba\x86\x82\xd0\xa7\x8f\xad\xf4\x1b\x34\x44\x5f\x0f\xd4\xf8\x37\x5e\x7c\x29\x5a\x38\x97\xc0\xb7\x8d\xb1\xbf\x7d\xd8\x3c\x5d\x80\x6c\xae\x2e\xb4\xb7\xb7\x8f\x96\x6e\xf0\x7d\x15\x0f\xa0\x54\x57\x5f\xa4\xa0\x8c\xc3\xff\x38\x2c\x31\x57\xf6\x37\x05\x4a\x50\x8c\x79\x93\x7a\x10\x81\xed\x04\x4e\x0c\xa9\x6c\x69\x68\xe9\x1a\x2c\xd9\x54\x81\xed\xc4\xc1\x3f\x66\x50\x58\x60\xe9\xd4\xcc\xca\x52\x25\xef\x28\xb4\xe5\x98\xd4\xb3\xb6\xe2\xd3\x2e\xd2\xf5\xc1\xad\xdf\x9c\x50\x1e\x47\x13\xf4\x55\x68\x4f\xf5\x3c\x8a\x2e\xf6\x16\x07\xa8\x29\x10\xe2\x85\x81\x5e\x3e\x87\x3b\xf5\xb7\x1a\xf2\x97\x9a\xeb\x60\xe4\x1e\x57\x17\x02\x51\x18\xa9\x75\x73\xb0\x3c\xa3\x96\x50\xa4\x82\x42\x62\x7b\x57\xae\xa5\xbc\x85\x2f\x6d\x20\x39\x73\xef\x5c\x6f\x59\x02\xdb\xdb\x73\x07\x5b\xda\x57\x50\xd0\xa4\xa5\xb0\xe3\xb7\x8b\x2d\x7d\xb0\x50\x6d\xc4\x0b\x90\x16\x11\x54\x0c\xe2\x88\xe0\x3a\x64\x17\x5a\xc7\xc7\xbd\x6d\xb7\x6b\x28\xee\x60\xba\x9d\x0f\xce\x88\xe5\x5a\xfa\x4a\x5e\xd1\x1c\x4b\x78\x35\x53\x55\x71\xd3\x7e\x15\x12\x73\xb9\x36\x0d\xd4\x2b\xbb\x61\x39\x32\xab\xc7\x1a\x71\x69\x3d\xed\x64\x86\x10\x53\x74\x58\x4d\x03\xc7\x34\xa8\xe2\x4f\x20\xf1\x14\x4b\x1c\xed\xb2\xfb\x83\x1e\x78\xe6\x10\xab\x16\x60\xa7\x2d\xad\x71\xce\x18\x58\xf8\x80\x8b\x60\xbb\xe7\x5e\x3f\xad\xed\x90\x2c\xac\x90\xaa\x32\x0e\x8d\xd2\xdb\x73\x0f\xd4\x6e\x00\x42\x13\x33\xfe\xb0\x83\x0a\x27\x68\x0a\x25\x48\x38\x8a\x11\x49\x83\x45\xf5\x2a\xa7\x53\xd4\x52\x01\xc8\x39\x70\xa0\x75\x5a\xfb\x15\xbd\xff\xa8\x1d\xe4\xf6\xeb\x6c\x91\xc6\x65\x7b\x78\x5d\xcf\x28\x8e\xc9\xdf\xa7\x85\x19\x08\xd4\x6d\x0e\x3e\x4c\xa4\xdd\xdb\x04\xfe\x7e\x73\x28\xbd\x0f\x7e\x6e\xc2\xf6\x4f\x18\xed\x02\xfb\xea\xa1\x77\x3f\x9d\x5e\x2f\xb1\x9c\xf7\x5e\x51\x2d\xc4\x25\xa4\x06\x73\xe6\x90\xdf\x2c\x19\xa1\xf2\x9c\x9e\x94\x4c\xa8\xd2\x40\x63\x50\x5e\x40\xc6\xa7\xa6\x3d\xcf\x77\x4f\xd9\x1a\x03\x1c\xe5\x38\x9f\x43\xa6\x0a\xe5\xc9\xc1\x7f\xbf\x8d\x21\x7a\x7e\x27\xc8\xbe\x39\x53\x02\x2d\xe4\x3c\x1d\xa0\x63\xbf\xa8\x69\x31\x68\x70\x5b\x52\x44\xdb\x99\xd9\x1c\xd3\x69\x09\x7c\x6c\xbe\x33\xe0\x3c\xfe\xca\x4a\x38\x71\x01\x42\xe0\x02\xb6\x99\xba\xe4\xac\xe0\x20\xc4\x36\x73\x73\xeb\x8a\xce\x44\xa5\x77\xf3\x96\x6d\xa6\x72\x5e\x6a\xfc\xdd\x7e\x83\xc8\x52\xeb\x62\x2a\x3a\xd5\x31\xda\xdb\xa0\x09\x48\x6f\xec\xd1\xe8\xd8\x33\x5f\x7d\xf9\xef\x2f\x3b\xab\xdb\xce\xd8\x1c\x3d\x28\xd6\x96\x7c\x2b\x54\x40\xbb\xa3\x57\xa8\xd4\xa6\xed\x35\x4e\xd6\x74\x21\x4d\x8f\x5d\x37\xb6\xea\x77\x80\x74\x4b\x2b\xa9\x44\xbb\xce\x32\xb5\x7f\x28\x83\x95\xa3\x6b\x24\xe3\xa7\x8e\x95\x90\xd7\x80\x8c\x23\xb8\xdb\xc9\x63\xa0\x80\xc7\x16\xc8\x77\x62\x9d\x8b\x0a\x88\xf6\x9e\x1c\xda\x54\x0f\x9a\x08\xea\x96\x6f\x81\x3f\x3d\x22\x0d\x97\xa6\x2b\xd6\xe6\xd7\xed\xa1\xbb\x62\xbc\x21\x18\x1e\xea\x31\xd7\x75\xc4\xaa\xe8\xc7\x16\xcc\xfa\x30\x56\xef\x5e\x6a\xd1\xfa\x40\x13\xe1\x8f\x76\xa0\x13\x3b\x1e\x80\x27\x1a\x3c\x4b\xcc\x58\x88\x9f\x6c\x81\x18\xb4\x10\x96\x7e\x08\xef\x01\xf0\x49\x4c\xe8\x1d\x00\x94\xd8\xf2\xed\x20\x94\x8e\x45\x1e\x0d\x44\x09\xfd\x14\x6b\xf1\xeb\x9d\x2e\xa0\x75\x31\xa9\x77\x7c\x54\xa3\x58\xb0\x9c\x6b\x74\xb0\x2f\x58\x98\x3f\xda\x09\x16\x3b\x1e\x0d\x16\x33\xf6\x09\x06\x4b\x4c\xe8\x1d\x82\x25\xb6\x7c\xbb\x60\xe9\x58\xe4\xd1\x82\x25\xf4\xd3\x6e\xc1\x12\xd5\x68\xdd\xa5\xa5\x00\x19\xdc\x40\x22\xb9\x3d\x98\xd1\xce\x7f\x0d\x71\xfd\xed\xc2\xed\xf7\x0a\xf8\xca\xb4\x9f\x24\x4c\x9b\xa0\xec\xc4\xdd\x75\x35\xfb\x25\xfd\x1a\x0d\xd1\x37\x68\x7f\x78\xbd\x92\x20\x10\xa1\x2a\x54\x86\xfb\x03\x1b\x1b\xb4\x2a\x91\x04\xbe\x20\x54\x5d\xaf\xbc\xd0\x88\xbd\xae\xa7\xad\xa3\xf9\x77\xed\x73\x5d\xcd\x46\x28\x29\x40\x4e\x70\x59\x66\x79\x2d\x9f\x6e\x6e\x76\x32\x79\xdb\x53\x56\x2f\xb5\x99\xb9\x64\x65\xaa\x09\xb9\x0b\xe2\xc1\x8b\xe0\x6a\xe8\xdb\xe1\x02\x72\x76\x0b\x7c\xf5\x09\x9a\x81\x5b\xd1\x9e\xd8\x02\xcd\xe9\xfa\x09\xda\xa0\xc4\x42\x66\xcd\x71\xfd\xe8\xa6\x68\xe3\xb7\x57\xcc\x9c\xe9\xf1\x57\x14\xb5\xbc\x0d\x88\xcb\x6c\x11\x5c\x8b\xdc\x8b\xdf\x0a\x90\x17\x50\x02\x16\x7e\xeb\x93\x9b\x67\x9d\x76\x7a\xf7\xe6\x77\x29\xd5\x75\x26\xc9\xd9\x62\x89\x25\xb9\x26\x25\x91\xab\x49\x6a\xd7\xeb\x9e\x76\x9b\x96\x69\x67\xf7\x25\x26\x15\x52\x8a\x66\xc5\x9d\xe0\x8e\x49\x1c\xed\xea\x36\xc0\x25\xfb\x0e\xae\xab\x02\x11\x81\x30\x5d\x21\x36\x43\x89\x2d\xa2\xc4\xc8\xdc\x7c\xc5\xc8\xdc\x62\x84\xba\x08\x8e\xe4\x1d\x4d\xc6\xe8\x74\x5c\x1c\xd6\x84\x82\x8f\x5b\xae\xeb\xc0\x9a\x86\x29\x0a\x7d\xb0\x43\xbf\xce\x30\x55\xdc\x5f\xd3\x19\xf3\xec\x69\xa5\xf2\xdf\x06\xd7\x3a\xeb\xf9\x19\x51\x0b\xac\xca\x76\x6e\x5c\x61\xfb\x52\x38\x9e\xfe\x00\xe5\x12\xfc\xf6\xb1\xf6\xf8\x5b\x4e\xcc\xaf\x01\xeb\xd7\x4f\x9b\x0b\x4d\x08\xce\x6f\x5f\xa1\xd6\x30\xbe\x21\x13\xbb\x0e\xdb\x3a\x35\xec\x03\x37\x5d\xa0\xe8\xed\xd8\x75\xa5\xdd\x4f\x39\x6a\x42\xad\x0e\x79\xad\x56\x2f\x42\x7c\x01\x78\x4a\x68\x31\x46\xba\x85\x6f\x81\xe2\x7a\x95\x9e\xe1\xbf\x52\x1a\x39\x6b\xf5\x24\x27\x76\x4d\xc2\x69\xac\x87\x75\x00\xdb\x21\x23\xef\xb8\xfd\xe2\xed\x0d\xac\x06\x71\xca\xc1\xc5\x31\xf6\xde\x65\xeb\xbd\x49\x1d\x05\x47\x2d\xac\x49\x83\x2a\x7d\x97\x5a\x07\xef\x9c\xfe\x7c\x7a\x76\x95\xfd\xf0\xea\xec\xbb\x37\xa7\x17\xee\xda\x6f\x50\x9e\x47\xfa\xd5\xab\xf5\xb9\x67\x7c\x35\x4f\x7d\x7f\x71\xf8\x85\xfa\x52\xf3\xb4\xb5\x0e\xd1\x29\xe7\x8c\x37\xa8\xfd\x5e\xc4\xe0\x3f\x19\x8c\xc3\x4e\x6a\x5d\x36\x85\xe4\x1a\x28\x49\xf5\xef\xcb\xba\x26\x84\x3b\x22\xd3\xaf\x06\x47\x7b\x1f\x36\x29\xf7\xb0\x5f\xe2\x3e\xb1\xc6\xee\xc6\xe7\xf4\x6d\xf5\x3a\x1f\xaa\xf8\x43\x7e\x24\xfc\xb1\xf4\xae\xef\xb9\x9b\xb5\xff\x7f\x00\x00\x00\xff\xff\xa4\x19\xb1\xc5\x1b\x3e\x00\x00")

func includeWt_raiiHBytes() ([]byte, error) {
	return bindataRead(
		_includeWt_raiiH,
		"include/wt_raii.h",
	)
}

func includeWt_raiiH() (*asset, error) {
	bytes, err := includeWt_raiiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "include/wt_raii.h", size: 15899, mode: os.FileMode(420), modTime: time.Unix(1546490172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"include/wt_raii.h": includeWt_raiiH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"include": &bintree{nil, map[string]*bintree{
		"wt_raii.h": &bintree{includeWt_raiiH, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
